class Controller

instance variables

-- shared variables: monitored
enc_motor: real := 0;
enc_load: real := 0;

-- shared variable: controlled
pwm_motor: real := 0;

-- PID variables
uD: real := 0.0;
uI: real := 0.0;
prev_err: real := 0.0;

-- store sensor and hold values
hold_pwm: real := 0.0;

operations

-- periodic operation
Step: () ==> ()
Step() == (
  -- write held value to actuator
  pwm_motor := hold_pwm;

  -- calculate new hold value
  let err = get_setpoint(time/1e9) - enc2rot(enc_motor)
  in hold_pwm := limit(CalcPID(err), -1, 1);
);

-- calculate PID response for the given error
CalcPID: real ==> real
CalcPID(err) == (
  uD := FACTOR * (TAUD *  uD  * BETA + TAUD * K * 
	    (err - prev_err) + SAMPLETIME * K * err);
  uI := uI + SAMPLETIME * uD / TAUI;
  prev_err := err;
  return uI + uD
)

-- define periodic thread (nanoseconds)
thread periodic(SAMPLETIME * 1e9, 0, 0, 0)(Step)

functions 

-- function to compute rotation from encoder signal
enc2rot: real -> real
enc2rot (penc) == 
  (penc / ENC_RESOLUTION) / BELT_RATIO;

-- get setpoint for the given time (cycloid signal)
get_setpoint: real -> real
get_setpoint(t) == 
  let delta = 2 * MATH`pi * (t - START_TIME) / 
              (STOP_TIME - START_TIME),
      cycle = AMPLITUDE * (delta - MATH`sin(delta)) / 
              (2 * MATH`pi) 
  in if delta < 0 then 0
     elseif delta > 2 * MATH`pi then AMPLITUDE
     else cycle;

-- limit x between min and max
limit: real * real * real -> real
limit(x, min, max) ==
  if x < min then min
  elseif x > max then max
  else x;

values

-- thread period in seconds (0.02 = 50Hz)
SAMPLETIME = 0.02;

-- conversion constants used
ENC_RESOLUTION : real = 2000.0;
BELT_RATIO : real = 3.75;

-- cycloid signal parameters
START_TIME = 0;
STOP_TIME = 1;
AMPLITUDE = 1;

-- PID controller parameters
K = 1;
TAUI = 2e3;
TAUD = 0.05;
BETA = 0.1;
FACTOR = 1 / (SAMPLETIME + TAUD * BETA)

end Controller