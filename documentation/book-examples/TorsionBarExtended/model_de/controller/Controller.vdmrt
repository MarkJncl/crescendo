class Controller is subclass of AbstractController

types

-- represents an angle in radians
public Angle = real
inv a == 0 <= a and a <= (2 * MATH`pi);

-- represents setpoint change time / value
SetpointChange ::    setpoint : real
                  travel_time : Time
                    wait_time : Time

instance variables

-- signal generator
 sp_gen: [CycloidGenerator] := nil;

-- control object
private pid: DTControl;

-- store sensor and hold values
private hold_pwm: real := 0.0;
private sample_encm: real := 0.0;
private sample_encl: real := 0.0;

-- setpoints to visit
queue: seq of SetpointChange := [];

-- track time between setpoint changes
next_time: real := 0

operations

public Controller: nat1 ==> Controller
Controller(f) == (
    -- setup superclass	
	SetupThread(f, 0, 0, 0);
	SetupIO();
	
	-- initialise instance variables
	pid := new LimitedDTControl(new PID(k, tauI, tauD));
	pid.SetSampleTime(sampletime);
);

-- action to execute before each loop body
protected BeforeStep: () ==> ()
BeforeStep() == (
    -- write actuator value
  pwmMotor.Write(hold_pwm);
  -- read sensor values
  sample_encm := enc2rot(encMotor.Read());
  sample_encl := enc2rot(encLoad.Read())
);
    
-- action to execute each control loop
protected StepBody: () ==> ()
StepBody() == (
  -- change setpoint if necessary
  if len queue > 0 then (
    let mk_SetpointChange(sp, t_time, w_time) = hd queue 
    in (
      if now >= next_time then (
	    dcl travel_time: real := t_time;
	    let next_angle = 2*MATH`pi * sp in
	      if next_angle = 0 or 
	        (next_angle >= Monitor`SLOW_MIN and 
	        next_angle <= Monitor`SLOW_MAX) then 
	          -- increase travel time to limit speed
              let distance = abs (next_angle - 
                               (2*MATH`pi * sample_encm)) 
              in  travel_time := distance / 0.5;
      
        -- update setpoint generation
        sp_gen := new CycloidGenerator(sample_encm, 
                                       sp - sample_encm, 
                                       now, 
                                       now + travel_time);
      
        -- set next change time
        next_time := now + t_time + w_time;

        -- update queue
        queue := tl queue;
        
        -- diagnostics
        IO`printf("[%s] Setpoint changed to %s. Next change at %s.\n", 
            [now, sp, next_time]);        
      );
    );  
  );	
	
  -- calculate new hold value
  if sp_gen <> nil then
  let err = sp_gen.Output() - sample_encm 
  in hold_pwm := pid.Output(err);
);

-- action to execute after each loop body
protected AfterStep: () ==> ()
AfterStep() == 
  IO`printf ("[%s] sp = %s; hold_pwm = %s; sample_encm = %s; sample_encl = %s\n", [now, if sp_gen = nil then "n/a" else sp_gen.Output(), hold_pwm, sample_encm, sample_encl]);

-- stop if speed limit or no-go region are violated
public EmergencyStop: () ==> ()
EmergencyStop() == (
	-- stop movement
	hold_pwm := 0;
	-- clear setpoint and queue
	sp_gen := nil;
	queue := [];
	-- diagnostics
	IO`printf ("[%s] EMERGENCY STOP!\n", [time/1e9])
); 

-- visit a set of angles
public Visit: set of Angle ==> ()
Visit(s) == (
  let sorted = Sort(s),
      setpoints = [angle / (2 * MATH`pi) | 
                               angle in set elems sorted] 
  in for sp in setpoints ^ [0] do
    -- update queue
    queue := queue ^ 
      [mk_SetpointChange(sp, TRAVEL_TIME, WAIT_TIME)]
)
pre s <> {} and 
    forall a in set s & 
      (a < Monitor`NO_GO_MIN or a > Monitor`NO_GO_MAX);

-- sort angles in ascending order
private Sort: set of Angle ==> seq of Angle
Sort(s) == (
	dcl sorted: seq of Angle := [];
	-- insert each element into the right position
	for all a in set s do sorted := insert(a, sorted);
	return sorted
)
post elems RESULT = s and 
     len RESULT = card s and
     forall i in set inds RESULT & 
	     i <> len RESULT => RESULT(i) <= RESULT(i+1);

-- avoid concurrent access to queue
sync mutex(Visit, StepBody);
sync mutex(Visit);
sync mutex(StepBody);

functions 

-- auxiliary function for Sort operation
private insert: Angle * seq of Angle -> seq of Angle
insert(a, sorted) == 
   if sorted = [] then [a]
   elseif a < hd sorted then [a] ^ sorted
   else [hd sorted] ^ insert(a, tl sorted);

-- function to compute rotation from encoder signal
private enc2rot: real -> real
enc2rot(enc) == 
 (enc / 
  Environment`ENC_RESOLUTION) / 
  Environment`BELT_RATIO;

values

-- PID constants
k : real = 1.0;
tauI : real = 2E3;
tauD : real = 0.05;

-- setpoint time changes
TRAVEL_TIME : real = 1;
WAIT_TIME : real = 0.5;

end Controller