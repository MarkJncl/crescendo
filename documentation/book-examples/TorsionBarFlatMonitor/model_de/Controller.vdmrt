class Controller

types

-- represents an angle in radians
public Angle = real
inv a == 0 <= a and a <= (2 * MATH`pi);

-- represents a setpoint in revolutions
Setpoint = real;

instance variables

-- shared variables: monitored
enc_motor: real := 0;
enc_load: real := 0;

-- shared variable: controlled
pwm_motor: real := 0;

-- PID variables
uD: real := 0.0;
uI: real := 0.0;
prev_err: real := 0.0;

-- store sensor and hold values
hold_pwm: real := 0.0;

-- setpoints to visit
queue: seq of Setpoint := [];

-- track time between setpoint changes
next_time: real := 0;

-- variables for setpoint generation
base: real := 0;
amplitude: real := 0;
start_time: real := 0;
stop_time: real := 0;

-- encoder sample
prev_encl: real := 0.0;

operations

-- periodic operation
Step: () ==> ()
Step() == (
  -- record current time
  dcl now: real := time/1e9;

  -- write held value to actuator
  pwm_motor := hold_pwm;

  -- check for no-go and speed violations
  CheckMonitor();

  -- time to move and setpoints remain
  if now >= next_time and len queue > 0 then
    let next_pos = hd queue in (
      queue := tl queue;

      -- update setpoint generation variables
      base := enc2rot(enc_motor);
      amplitude := next_pos - enc2rot(enc_motor);
      start_time := now;
      stop_time := now + TRAVEL_TIME;

      -- next point is in the slow region or return to 0
      let next_angle = 2*MATH`pi * next_pos in
      if next_angle = 0 or 
         (next_angle >= SLOW_MIN and 
          next_angle <= SLOW_MAX) then (
        -- increase travel time to limit speed
        let d = abs (next_angle - (2*MATH`pi * base)) in
        stop_time := now + d / 0.5;
      );

      -- set time for next setpoint change
      next_time := stop_time + WAIT_TIME
    );

  -- calculate new hold value
  let err = GetSetpoint(time/1e9) - enc2rot(enc_motor)
  in hold_pwm := limit(CalcPID(err), -1, 1);
);

CheckMonitor: () ==> ()
CheckMonitor() == (
  -- read sensor value, calculate speed
  let encl = (enc_load / ENC_RESOLUTION) * 2 * MATH`pi,
      speed = (encl - prev_encl) / SAMPLETIME
  in (
	if encl >= NO_GO_MIN and encl <= NO_GO_MAX then
	  -- inside no-go region
	  EmergencyStop()
	elseif encl >= SLOW_MIN and encl <= SLOW_MAX then
      -- over speed limit in slow region
	  if speed > SPEED_LIMIT then EmergencyStop();
    
    -- record sensor sample
    prev_encl := encl    
  )
);

-- stop if speed limit or no-go region are violated
EmergencyStop: () ==> ()
EmergencyStop() == (
    -- stop movement
    hold_pwm := 0;
    -- clear setpoint and queue
    start_time := 0;
    stop_time := 0;
    base := enc2rot(enc_motor);
    queue := [];
); 

-- visit a set of angles
Visit: set of Angle ==> ()
Visit(s) ==
  let sorted = Sort(s),
      setpoints = [angle / (2 * MATH`pi) | 
                     angle in set elems sorted] 
  in queue := queue ^ setpoints ^ [0]
pre s <> {} and 
    forall a in set s & 
      (a < NO_GO_MIN or a > NO_GO_MAX);

-- sort angles in ascending order
Sort: set of Angle ==> seq of Angle
Sort(s) == (
    dcl sorted: seq of Angle := [];
    -- insert each element into the right position
    for all a in set s do sorted := insert(a, sorted);
    return sorted
)
post elems RESULT = s and 
     len RESULT = card s and
     forall i in set inds RESULT & 
         i <> len RESULT => RESULT(i) <= RESULT(i+1);

-- calculate PID response for the given error
CalcPID: real ==> real
CalcPID(err) == (
  uD := FACTOR * (TAUD *  uD  * BETA + TAUD * K * 
	    (err - prev_err) + SAMPLETIME * K * err);
  uI := uI + SAMPLETIME * uD / TAUI;
  prev_err := err;
  return uI + uD
);

-- get setpoint for the given time (cycloid signal)
GetSetpoint: real ==> real
GetSetpoint(t) == 
  if stop_time - start_time = 0 then return base else
  let delta = 2 * MATH`pi * (t - start_time) / 
              (stop_time - start_time),
      cycle = amplitude * (delta - MATH`sin(delta)) / 
              (2 * MATH`pi) 
  in if delta < 0 then return base
    elseif delta > 2*MATH`pi then return amplitude + base
    else return cycle + base;

-- define periodic thread (nanoseconds)
thread periodic(SAMPLETIME * 1e9, 0, 0, 0)(Step)

functions 

-- auxiliary function for Sort operation
insert: Angle * seq of Angle -> seq of Angle
insert(a, sorted) == 
    if sorted = [] then [a]
    elseif a < hd sorted then [a] ^ sorted
    else [hd sorted] ^ insert(a, tl sorted);

-- function to compute rotation from encoder signal
enc2rot: real -> real
enc2rot (penc) == 
  (penc / ENC_RESOLUTION) / BELT_RATIO;

-- limit x between min and max
limit: real * real * real -> real
limit(x, min, max) ==
  if x < min then min
  elseif x > max then max
  else x;

values

-- thread period in seconds (0.02 = 50Hz)
SAMPLETIME = 0.02;

-- conversion constants used
ENC_RESOLUTION : real = 2000.0;
BELT_RATIO : real = 3.75;

-- setpoint time changes
TRAVEL_TIME = 1;
WAIT_TIME = 0.5;

-- speed limit in slow region {rad/s}
SPEED_LIMIT = 1;

-- no go region
NO_GO_MIN = 5*MATH`pi / 3;
NO_GO_MAX = 11*MATH`pi / 6;

-- slow region
SLOW_MIN = 3*MATH`pi / 2;
SLOW_MAX = 2*MATH`pi;


-- PID controller parameters
K = 1;
TAUI = 2e3;
TAUD = 0.05;
BETA = 0.1;
FACTOR = 1 / (SAMPLETIME + TAUD * BETA)

end Controller