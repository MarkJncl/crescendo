class AbstractThread

types

public Time = real
inv t == t >= 0

values

-- interpreter resolution is 1 nanosecond
public RESOLUTION: real = 1E9
    
instance variables

-- loop parameters
protected period: nat := 1e9;
protected jitter: nat := 0;
protected delay: nat := 0;
protected offset: nat := 1;
protected sampletime: real := 1;
    
-- variables for time keeping
private last: Time := 0;
protected now: Time := 0;
protected delta: Time := 0

operations

-- setup loop parameters
protected SetupThread: nat1 * nat * nat * nat ==> ()
SetupThread(f, j, d, o) == (
  -- initialize the loop parameters
  sampletime := 1/f;
  period := floor (sampletime * RESOLUTION); 
  jitter  := j;
  delay   := d;
  offset  := o
);

-- action to execute before each loop body
protected BeforeStep: () ==> ()
BeforeStep() == skip;
    
-- action to execute each control loop
protected StepBody: () ==> ()
StepBody() == skip;
    
-- action to execute after each loop body
protected AfterStep: () ==> ()
AfterStep() == skip;
    
private Step: () ==> ()
Step() == (
  -- update the time keeping (in zero time)
  duration (0) (
    last := now;
    now := time / RESOLUTION;
    delta := now - last;
  );
  
  -- call the loop pre-amble
  BeforeStep();
  -- call the loop body
  StepBody();
  -- call the loop post-amble
  AfterStep();
)
-- time book keeping must be consistent
pre last <= now
post delta >= 0

thread periodic (period, jitter, delay, offset) (Step)

end AbstractThread