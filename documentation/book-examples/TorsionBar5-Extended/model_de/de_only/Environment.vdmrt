class Environment is subclass of AbstractThread

-- thread that provides a simplified simulatior
-- access to "shared variables" by sensors and actuators

instance variables 

-- variables for sensors
encm: int := 0;
encl: int := 0;

-- variable for the motor
pwm: real := 0;

-- position of motor {rads}
position: real := 0;

-- control initialisation of CSV file
init: bool := true;
csv_open: bool := false

values

-- controls DE-only simulation duration {s}
SIMULATION_TIME = 20;

-- approximate speed of motor at PWM = 1 {rad/s}
MOTOR_MAX_SPEED = 285;

-- conversion constants used
public BELT_RATIO = 3.75;

operations

-- constructor for Environment
public Environment: nat1 ==> Environment
Environment(f) == (
  -- setup superclass	
  SetupThread(f, 0, 0, 1e8);

);

-- simulation loop
protected StepBody: () ==> ()
StepBody() == duration (0) (
  -- create CSV file for output on first step
  if init then ( 
    -- try to create file
    csv_open := CSV`fwriteval("tbar_extended_co-sim.csv", 
      ["time{s}", "pos{rev}", "velocity{rad/s}", "pwm"], 
      <start>);
    -- warn on failure
    if not csv_open 
    then IO`println("Failed to create CSV file.");
    -- only run once
    init := false
  );
  
  -- stop simulation, or perform step
  if time >= SIMULATION_TIME * RESOLUTION
  then World`done := true
  else (
    -- compute new position of motor based on pwm
    let speed = pwm * MOTOR_MAX_SPEED,
        distance = speed * sampletime,
        pos = position + distance,
        revs = pos / (2 * MATH`pi)
    in (
      -- update state
      position := pos;
      -- update variables read by sensors
      encm := floor (revs * World`ENC_COUNTS);
      encl := floor (encm / BELT_RATIO);       
      -- diagnostics
      IO`printf ("[%s] Environment step\n", [now]);      
      -- CSV output
      if csv_open then 
        let lspeed = speed / BELT_RATIO,
            lpos = revs / BELT_RATIO,
            - = CSV`fwriteval("tbar_extended_co-sim.csv", 
                  [now, lpos, lspeed, pwm], <append>) 
        in skip; -- ignore return value of fwriteval      
    )  
  )
);

-- return the value of the motor encoder
public GetEncM: () ==> int
GetEncM() == return encm;

-- return the value of the load encoder
public GetEncL: () ==> int
GetEncL() == return encl;

-- return the value of the motor
public GetMotor: () ==> IActuatorPWM`PWM
GetMotor() == return pwm;

-- set the value of the motor
public SetMotor: IActuatorPWM`PWM ==> ()
SetMotor(p) == pwm := p;

end Environment