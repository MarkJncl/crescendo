class Monitor is subclass of AbstractThread

instance variables

-- controller
controller: Controller;

-- sensors (load encoder)
encLoad: ISensorInt;

-- encoder sample
prev_encl: real := 0.0;

operations

-- constructor for Monitor
public Monitor: nat1 * Controller ==> Monitor
Monitor(f, ctrl) == (
  -- setup superclass 
  SetupThread(f, 0, 0, 0);

  -- set instance variables  
  controller := ctrl;
  encLoad := TorsionBar`io.GetEncLoad()
);

-- periodic operation
protected StepBody: () ==> ()
StepBody() == (
  -- read sensor value, calculate speed
  dcl sample_encl: real := enc2rad(encLoad.Read());
  dcl speed: real := (sample_encl - prev_encl) / sampletime;
	
  if NO_GO_MIN <= sample_encl and sample_encl <= NO_GO_MAX then (
    -- inside no-go region
    controller.EmergencyStop()
  )
  elseif SLOW_MIN <= sample_encl and sample_encl <= SLOW_MAX then (
    -- inside slow region
    if speed > SPEED_LIMIT then controller.EmergencyStop()
  );
	
  -- record sensor sample
  prev_encl := sample_encl
)

functions

-- function to compute rotation from encoder signal
private enc2rad: real -> real
enc2rad(enc) == 
  2 * MATH`pi * (enc / World`ENC_COUNTS);

values

-- speed limit in slow region {rad/s}
SPEED_LIMIT : int = 1;

-- no go region
public NO_GO_MIN : real = 5*MATH`pi / 3;
public NO_GO_MAX : real = 11*MATH`pi / 6;

-- slow region
public SLOW_MIN : real = 3*MATH`pi / 2;
public SLOW_MAX : real = 2*MATH`pi;

end Monitor