% top-level controller strategy

\begin{vdm_al}
class ControlStrategy

values
	-- simulator resolution is 1 nsec
	protected RESOLUTION : real = 1E9
	
instance variables
	-- place holders for loop parameters
	protected period : nat;
	protected jitter : nat;
	protected delay  : nat;
	protected offset : nat;
	
	-- place holders for time keeping
	private last : real := 0;
	protected now : real := 0;
	protected delta : real := 0;
	protected first : real := 0
	
operations
	-- constructor
	public ControlStrategy: nat * nat * nat * nat ==> ControlStrategy
	ControlStrategy (pp, pj, pd, po) == (
		-- initialize the loop parameters
		period	:= pp;
		jitter	:= pj;
		delay	:= pd;
		offset	:= po
	)
	
instance variables
	-- place holder for all sensors
	private sensors: map seq of char to ISensorReal := {|->};
	
	-- place holder for all actuators
	private actuators: map seq of char to IActuatorReal := {|->};
	
operations
	-- add sensors and insist on unique name
	public addSensor: ISensorReal ==> ()
	addSensor (pisr) == 
		if pisr.identify() not in set dom sensors
		then sensors := sensors munion {pisr.identify() |-> pisr}
		else error;
	
	-- get current sensor value
	public getSensor: seq of char ==> real
	getSensor (pnm) == return sensors(pnm).Read()
	pre pnm in set dom sensors;
	
	-- add actuators and insist on unique name
	public addActuator: IActuatorReal ==> ()
	addActuator (piar) == 
		if piar.identify() not in set dom actuators
		then actuators := actuators munion {piar.identify() |-> piar}
		else error;
	
	-- set current actuator value
	public setActuator: seq of char * real ==> ()
	setActuator (pnm, pvl) == actuators(pnm).Write(pvl)
	pre pnm in set dom actuators;
	
	-- auxiliary operation to obtain the set-point
	public getSetpoint: real ==> real
	getSetpoint (-) == is subclass responsibility;
	
	-- initialize the controller before loop starts
	public init: () ==> ()
	init () == (
		-- initialize the time keeping
		now := time / RESOLUTION;
		last := now;
		first := now;
		
		-- start the thread 
		start(self)
	);

	-- action to execute before each loop body
	public loop_pre: () ==> ()
	loop_pre () == skip;
	
	-- action to execute each control loop
	public loop_body: () ==> ()
	loop_body () == skip;
	
	-- action to execute after each loop body
	public loop_post: () ==> ()
	loop_post () == skip;
	
	private loop: () ==> ()
	loop () == (
		-- update the time keeping (in zero time)
		duration (0) (
			last := now;
			now := time / RESOLUTION;
			delta := now - last;
		);
		-- call the loop pre-amble
		loop_pre();
		-- call the loop body
		loop_body();
		-- call the loop post-amble
		loop_post();
	)
	-- time book keeping must be consistent
	pre last <= now
	post delta >= 0
	
thread
	-- definition of the control loop thread
	periodic (period, jitter, delay, offset) (loop)
	
end ControlStrategy
\end{vdm_al}