% environment used for co-simulation

\begin{vdm_al}
class Environment
	
operations
	public init: () ==> ()
	init () == skip;

instance variables
	-- maintain a named map of sensor objects
	static private sensors : map seq of char to SensorReal := {|->}
		
operations
	-- auxiliary public operation to create a new sensor
	static public createSensorReal: seq of char ==> SensorReal
	createSensorReal (pnm) == (
		-- create the new sensor instance
		dcl sensor : SensorReal := new SensorReal(pnm);
		-- add to the mapping
		sensors := sensors munion {pnm |-> sensor};
		-- diagnostics
		IO`printf("creating sensor %s\n", [pnm]);
		-- offer the object to the caller
		return sensor
	)
	-- sensor name must be unique
	pre pnm not in set dom sensors;
	
	-- auxiliary protected operation to retrieve a named sensor
	-- this operation is used for abstract DE simulation only
	protected getSensor: seq of char ==> SensorReal
	getSensor (pnm) == return sensors(pnm)
	pre pnm in set dom sensors
	
instance variables
	-- maintain a named map of actuator objects
	static private actuators: map seq of char to ActuatorReal := {|->}
	
operations
	-- auxiliary public operation to create a new actuator
	static public createActuatorReal: seq of char ==> ActuatorReal
	createActuatorReal (pnm) == (
		-- create the new actuator instance
		dcl actuator : ActuatorReal := new ActuatorReal(pnm);
		-- add to the mapping
		actuators := actuators munion {pnm |-> actuator};
		-- diagnostics
		IO`printf("creating actuator %s\n", [pnm]);
		-- offer the object to the caller
		return actuator
	)
	-- actuator name must be unique
	pre pnm not in set dom actuators;
	
	-- auxiliary protected operation to retrieve a named actuator
	-- this operation is used for abstract DE simulation only
	protected getActuator: seq of char ==> ActuatorReal
	getActuator (pnm) == return actuators(pnm)
	pre pnm in set dom actuators
	
end Environment
\end{vdm_al}
