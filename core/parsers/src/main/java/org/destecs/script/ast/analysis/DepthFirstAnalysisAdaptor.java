/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.destecs.script.ast.analysis;


import org.destecs.script.ast.expressions.AMsTimeunit;
import org.destecs.script.ast.expressions.binop.AModBinop;
import java.lang.Boolean;
import org.destecs.script.ast.statement.AQuitStm;
import java.lang.Long;
import org.destecs.script.ast.preprocessing.AScriptInclude;
import org.destecs.script.ast.types.AIntType;
import org.destecs.script.ast.expressions.ASTimeunit;
import org.destecs.script.ast.expressions.ABoolSingleExp;
import org.destecs.script.ast.expressions.PExp;
import java.lang.Double;
import org.destecs.script.ast.statement.AErrorMessageStm;
import org.destecs.script.ast.statement.APrintMessageStm;
import org.destecs.script.ast.expressions.binop.ADivideBinop;
import org.destecs.script.ast.node.INode;
import org.destecs.script.ast.statement.AAssignStm;
import org.destecs.script.ast.types.PType;
import org.destecs.script.ast.expressions.binop.PBinop;
import org.destecs.script.ast.expressions.binop.APlusBinop;
import org.destecs.script.ast.expressions.binop.ADifferentBinop;
import org.destecs.script.ast.expressions.AHTimeunit;
import org.destecs.script.ast.ACtDomain;
import org.destecs.script.ast.types.ATimeType;
import org.destecs.script.ast.analysis.intf.IAnalysis;
import org.destecs.script.ast.statement.AOnceStm;
import java.util.List;
import org.destecs.script.ast.expressions.binop.AEqualBinop;
import java.lang.Integer;
import org.destecs.script.ast.expressions.binop.AGreaterThanBinop;
import org.destecs.script.ast.statement.PStm;
import org.destecs.script.ast.expressions.binop.AMultiplyBinop;
import org.destecs.script.ast.statement.AWarnMessageStm;
import org.destecs.script.ast.expressions.AIdentifierSingleExp;
import org.destecs.script.ast.expressions.binop.AMinusBinop;
import org.destecs.script.ast.expressions.PTimeunit;
import org.destecs.script.ast.expressions.AMTimeunit;
import org.destecs.script.ast.PDomain;
import org.destecs.script.ast.preprocessing.PInclude;
import org.destecs.script.ast.expressions.ABinaryExp;
import org.destecs.script.ast.expressions.AUnaryExp;
import org.destecs.script.ast.expressions.AUsTimeunit;
import org.destecs.script.ast.expressions.unop.ACeilUnop;
import org.destecs.script.ast.ADeDomain;
import org.destecs.script.ast.expressions.binop.AOrBinop;
import org.destecs.script.ast.expressions.ANumericalSingleExp;
import org.destecs.script.ast.expressions.unop.AMinusUnop;
import org.destecs.script.ast.node.tokens.TInt;
import org.destecs.script.ast.expressions.binop.ADivBinop;
import org.destecs.script.ast.expressions.binop.AGreaterEqualBinop;
import org.destecs.script.ast.statement.AWhenStm;
import org.destecs.script.ast.expressions.unop.PUnop;
import org.destecs.script.ast.expressions.binop.AAndBinop;
import org.destecs.script.ast.types.ARealType;
import java.util.Set;
import org.destecs.script.ast.expressions.unop.AFloorUnop;
import org.destecs.script.ast.expressions.ASystemTimeSingleExp;
import java.util.ArrayList;
import org.destecs.script.ast.expressions.SSingleExp;
import org.destecs.script.ast.statement.SMessageStm;
import org.destecs.script.ast.expressions.binop.AEquivBinop;
import java.lang.String;
import org.destecs.script.ast.expressions.ATimeSingleExp;
import org.destecs.script.ast.expressions.unop.AAbsUnop;
import org.destecs.script.ast.expressions.binop.ALessEqualBinop;
import org.destecs.script.ast.statement.ARevertStm;
import org.destecs.script.ast.expressions.binop.ALessThanBinop;
import org.destecs.script.ast.types.ABoolType;
import org.destecs.script.ast.expressions.binop.AImpliesBinop;
import org.destecs.script.ast.expressions.unop.AAddUnop;
import org.destecs.script.ast.node.IToken;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
@SuppressWarnings({"rawtypes","unchecked"})
public class DepthFirstAnalysisAdaptor implements IAnalysis
{
	private static final long serialVersionUID = 1L;

	protected Set _queue = new java.util.HashSet<INode>();

	/**
	* Creates a new {@code DepthFirstAnalysisAdaptor} node with the given nodes as children.
	* @deprecated This method should not be used, use AstFactory instead.
	* The basic child nodes are removed from their previous parents.
	* @param queue_ the {@link Set} node for the {@code queue} child of this {@link DepthFirstAnalysisAdaptor} node
	*/
	public DepthFirstAnalysisAdaptor(Set queue_)
	{
		super();
		this.setQueue(queue_);

	}


	/**
	 * Creates a new {@link DepthFirstAnalysisAdaptor} node with no children.
	 */
	public DepthFirstAnalysisAdaptor()
	{

	}


	/**
	 * Sets the {@code _queue} child of this {@link DepthFirstAnalysisAdaptor} node.
	 * @param value the new {@code _queue} child of this {@link DepthFirstAnalysisAdaptor} node
	*/
	public void setQueue(Set value)
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseTInt(TInt node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inTInt(node);


		outTInt(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inTInt(TInt node) throws Throwable
	{
		defaultInIToken(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outTInt(TInt node) throws Throwable
	{
		defaultOutIToken(node);
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseDouble(Double node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inDouble(node);


		outDouble(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inDouble(Double node) throws Throwable
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outDouble(Double node) throws Throwable
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseBoolean(Boolean node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inBoolean(node);


		outBoolean(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inBoolean(Boolean node) throws Throwable
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outBoolean(Boolean node) throws Throwable
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseInteger(Integer node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inInteger(node);


		outInteger(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inInteger(Integer node) throws Throwable
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outInteger(Integer node) throws Throwable
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseString(String node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inString(node);


		outString(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inString(String node) throws Throwable
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outString(String node) throws Throwable
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void caseLong(Long node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inLong(node);


		outLong(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void inLong(Long node) throws Throwable
	{

	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void outLong(Long node) throws Throwable
	{

	}


	/**
	* Called by the {@link PUnop} node from {@link PUnop#apply(IAnalysis)}.
	* @param node the calling {@link PUnop} node
	*/
	public void defaultInPUnop(PUnop node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PUnop} node from {@link PUnop#apply(IAnalysis)}.
	* @param node the calling {@link PUnop} node
	*/
	public void defaultOutPUnop(PUnop node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link PUnop} node from {@link PUnop#apply(IAnalysis)}.
	* @param node the calling {@link PUnop} node
	*/
	public void inPUnop(PUnop node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PUnop} node from {@link PUnop#apply(IAnalysis)}.
	* @param node the calling {@link PUnop} node
	*/
	public void outPUnop(PUnop node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link AAddUnop} node from {@link AAddUnop#apply(IAnalysis)}.
	* @param node the calling {@link AAddUnop} node
	*/
	public void caseAAddUnop(AAddUnop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAAddUnop(node);


		outAAddUnop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AAddUnop} node from {@link AAddUnop#apply(IAnalysis)}.
	* @param node the calling {@link AAddUnop} node
	*/
	public void inAAddUnop(AAddUnop node) throws Throwable
	{
		defaultInPUnop(node);
	}


	/**
	* Called by the {@link AAddUnop} node from {@link AAddUnop#apply(IAnalysis)}.
	* @param node the calling {@link AAddUnop} node
	*/
	public void outAAddUnop(AAddUnop node) throws Throwable
	{
		defaultOutPUnop(node);
	}


	/**
	* Called by the {@link AMinusUnop} node from {@link AMinusUnop#apply(IAnalysis)}.
	* @param node the calling {@link AMinusUnop} node
	*/
	public void caseAMinusUnop(AMinusUnop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAMinusUnop(node);


		outAMinusUnop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AMinusUnop} node from {@link AMinusUnop#apply(IAnalysis)}.
	* @param node the calling {@link AMinusUnop} node
	*/
	public void inAMinusUnop(AMinusUnop node) throws Throwable
	{
		defaultInPUnop(node);
	}


	/**
	* Called by the {@link AMinusUnop} node from {@link AMinusUnop#apply(IAnalysis)}.
	* @param node the calling {@link AMinusUnop} node
	*/
	public void outAMinusUnop(AMinusUnop node) throws Throwable
	{
		defaultOutPUnop(node);
	}


	/**
	* Called by the {@link AAbsUnop} node from {@link AAbsUnop#apply(IAnalysis)}.
	* @param node the calling {@link AAbsUnop} node
	*/
	public void caseAAbsUnop(AAbsUnop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAAbsUnop(node);


		outAAbsUnop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AAbsUnop} node from {@link AAbsUnop#apply(IAnalysis)}.
	* @param node the calling {@link AAbsUnop} node
	*/
	public void inAAbsUnop(AAbsUnop node) throws Throwable
	{
		defaultInPUnop(node);
	}


	/**
	* Called by the {@link AAbsUnop} node from {@link AAbsUnop#apply(IAnalysis)}.
	* @param node the calling {@link AAbsUnop} node
	*/
	public void outAAbsUnop(AAbsUnop node) throws Throwable
	{
		defaultOutPUnop(node);
	}


	/**
	* Called by the {@link AFloorUnop} node from {@link AFloorUnop#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnop} node
	*/
	public void caseAFloorUnop(AFloorUnop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAFloorUnop(node);


		outAFloorUnop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AFloorUnop} node from {@link AFloorUnop#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnop} node
	*/
	public void inAFloorUnop(AFloorUnop node) throws Throwable
	{
		defaultInPUnop(node);
	}


	/**
	* Called by the {@link AFloorUnop} node from {@link AFloorUnop#apply(IAnalysis)}.
	* @param node the calling {@link AFloorUnop} node
	*/
	public void outAFloorUnop(AFloorUnop node) throws Throwable
	{
		defaultOutPUnop(node);
	}


	/**
	* Called by the {@link ACeilUnop} node from {@link ACeilUnop#apply(IAnalysis)}.
	* @param node the calling {@link ACeilUnop} node
	*/
	public void caseACeilUnop(ACeilUnop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inACeilUnop(node);


		outACeilUnop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ACeilUnop} node from {@link ACeilUnop#apply(IAnalysis)}.
	* @param node the calling {@link ACeilUnop} node
	*/
	public void inACeilUnop(ACeilUnop node) throws Throwable
	{
		defaultInPUnop(node);
	}


	/**
	* Called by the {@link ACeilUnop} node from {@link ACeilUnop#apply(IAnalysis)}.
	* @param node the calling {@link ACeilUnop} node
	*/
	public void outACeilUnop(ACeilUnop node) throws Throwable
	{
		defaultOutPUnop(node);
	}


	/**
	* Called by the {@link PBinop} node from {@link PBinop#apply(IAnalysis)}.
	* @param node the calling {@link PBinop} node
	*/
	public void defaultInPBinop(PBinop node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PBinop} node from {@link PBinop#apply(IAnalysis)}.
	* @param node the calling {@link PBinop} node
	*/
	public void defaultOutPBinop(PBinop node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link PBinop} node from {@link PBinop#apply(IAnalysis)}.
	* @param node the calling {@link PBinop} node
	*/
	public void inPBinop(PBinop node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PBinop} node from {@link PBinop#apply(IAnalysis)}.
	* @param node the calling {@link PBinop} node
	*/
	public void outPBinop(PBinop node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link APlusBinop} node from {@link APlusBinop#apply(IAnalysis)}.
	* @param node the calling {@link APlusBinop} node
	*/
	public void caseAPlusBinop(APlusBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAPlusBinop(node);


		outAPlusBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link APlusBinop} node from {@link APlusBinop#apply(IAnalysis)}.
	* @param node the calling {@link APlusBinop} node
	*/
	public void inAPlusBinop(APlusBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link APlusBinop} node from {@link APlusBinop#apply(IAnalysis)}.
	* @param node the calling {@link APlusBinop} node
	*/
	public void outAPlusBinop(APlusBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link AMinusBinop} node from {@link AMinusBinop#apply(IAnalysis)}.
	* @param node the calling {@link AMinusBinop} node
	*/
	public void caseAMinusBinop(AMinusBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAMinusBinop(node);


		outAMinusBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AMinusBinop} node from {@link AMinusBinop#apply(IAnalysis)}.
	* @param node the calling {@link AMinusBinop} node
	*/
	public void inAMinusBinop(AMinusBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link AMinusBinop} node from {@link AMinusBinop#apply(IAnalysis)}.
	* @param node the calling {@link AMinusBinop} node
	*/
	public void outAMinusBinop(AMinusBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link AMultiplyBinop} node from {@link AMultiplyBinop#apply(IAnalysis)}.
	* @param node the calling {@link AMultiplyBinop} node
	*/
	public void caseAMultiplyBinop(AMultiplyBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAMultiplyBinop(node);


		outAMultiplyBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AMultiplyBinop} node from {@link AMultiplyBinop#apply(IAnalysis)}.
	* @param node the calling {@link AMultiplyBinop} node
	*/
	public void inAMultiplyBinop(AMultiplyBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link AMultiplyBinop} node from {@link AMultiplyBinop#apply(IAnalysis)}.
	* @param node the calling {@link AMultiplyBinop} node
	*/
	public void outAMultiplyBinop(AMultiplyBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link ADivideBinop} node from {@link ADivideBinop#apply(IAnalysis)}.
	* @param node the calling {@link ADivideBinop} node
	*/
	public void caseADivideBinop(ADivideBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inADivideBinop(node);


		outADivideBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ADivideBinop} node from {@link ADivideBinop#apply(IAnalysis)}.
	* @param node the calling {@link ADivideBinop} node
	*/
	public void inADivideBinop(ADivideBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link ADivideBinop} node from {@link ADivideBinop#apply(IAnalysis)}.
	* @param node the calling {@link ADivideBinop} node
	*/
	public void outADivideBinop(ADivideBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link ADivBinop} node from {@link ADivBinop#apply(IAnalysis)}.
	* @param node the calling {@link ADivBinop} node
	*/
	public void caseADivBinop(ADivBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inADivBinop(node);


		outADivBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ADivBinop} node from {@link ADivBinop#apply(IAnalysis)}.
	* @param node the calling {@link ADivBinop} node
	*/
	public void inADivBinop(ADivBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link ADivBinop} node from {@link ADivBinop#apply(IAnalysis)}.
	* @param node the calling {@link ADivBinop} node
	*/
	public void outADivBinop(ADivBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link AModBinop} node from {@link AModBinop#apply(IAnalysis)}.
	* @param node the calling {@link AModBinop} node
	*/
	public void caseAModBinop(AModBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAModBinop(node);


		outAModBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AModBinop} node from {@link AModBinop#apply(IAnalysis)}.
	* @param node the calling {@link AModBinop} node
	*/
	public void inAModBinop(AModBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link AModBinop} node from {@link AModBinop#apply(IAnalysis)}.
	* @param node the calling {@link AModBinop} node
	*/
	public void outAModBinop(AModBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link ALessThanBinop} node from {@link ALessThanBinop#apply(IAnalysis)}.
	* @param node the calling {@link ALessThanBinop} node
	*/
	public void caseALessThanBinop(ALessThanBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inALessThanBinop(node);


		outALessThanBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ALessThanBinop} node from {@link ALessThanBinop#apply(IAnalysis)}.
	* @param node the calling {@link ALessThanBinop} node
	*/
	public void inALessThanBinop(ALessThanBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link ALessThanBinop} node from {@link ALessThanBinop#apply(IAnalysis)}.
	* @param node the calling {@link ALessThanBinop} node
	*/
	public void outALessThanBinop(ALessThanBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link ALessEqualBinop} node from {@link ALessEqualBinop#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualBinop} node
	*/
	public void caseALessEqualBinop(ALessEqualBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inALessEqualBinop(node);


		outALessEqualBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ALessEqualBinop} node from {@link ALessEqualBinop#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualBinop} node
	*/
	public void inALessEqualBinop(ALessEqualBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link ALessEqualBinop} node from {@link ALessEqualBinop#apply(IAnalysis)}.
	* @param node the calling {@link ALessEqualBinop} node
	*/
	public void outALessEqualBinop(ALessEqualBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link AGreaterThanBinop} node from {@link AGreaterThanBinop#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterThanBinop} node
	*/
	public void caseAGreaterThanBinop(AGreaterThanBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAGreaterThanBinop(node);


		outAGreaterThanBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AGreaterThanBinop} node from {@link AGreaterThanBinop#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterThanBinop} node
	*/
	public void inAGreaterThanBinop(AGreaterThanBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link AGreaterThanBinop} node from {@link AGreaterThanBinop#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterThanBinop} node
	*/
	public void outAGreaterThanBinop(AGreaterThanBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link AGreaterEqualBinop} node from {@link AGreaterEqualBinop#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualBinop} node
	*/
	public void caseAGreaterEqualBinop(AGreaterEqualBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAGreaterEqualBinop(node);


		outAGreaterEqualBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AGreaterEqualBinop} node from {@link AGreaterEqualBinop#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualBinop} node
	*/
	public void inAGreaterEqualBinop(AGreaterEqualBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link AGreaterEqualBinop} node from {@link AGreaterEqualBinop#apply(IAnalysis)}.
	* @param node the calling {@link AGreaterEqualBinop} node
	*/
	public void outAGreaterEqualBinop(AGreaterEqualBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link AEqualBinop} node from {@link AEqualBinop#apply(IAnalysis)}.
	* @param node the calling {@link AEqualBinop} node
	*/
	public void caseAEqualBinop(AEqualBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAEqualBinop(node);


		outAEqualBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AEqualBinop} node from {@link AEqualBinop#apply(IAnalysis)}.
	* @param node the calling {@link AEqualBinop} node
	*/
	public void inAEqualBinop(AEqualBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link AEqualBinop} node from {@link AEqualBinop#apply(IAnalysis)}.
	* @param node the calling {@link AEqualBinop} node
	*/
	public void outAEqualBinop(AEqualBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link ADifferentBinop} node from {@link ADifferentBinop#apply(IAnalysis)}.
	* @param node the calling {@link ADifferentBinop} node
	*/
	public void caseADifferentBinop(ADifferentBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inADifferentBinop(node);


		outADifferentBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ADifferentBinop} node from {@link ADifferentBinop#apply(IAnalysis)}.
	* @param node the calling {@link ADifferentBinop} node
	*/
	public void inADifferentBinop(ADifferentBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link ADifferentBinop} node from {@link ADifferentBinop#apply(IAnalysis)}.
	* @param node the calling {@link ADifferentBinop} node
	*/
	public void outADifferentBinop(ADifferentBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link AOrBinop} node from {@link AOrBinop#apply(IAnalysis)}.
	* @param node the calling {@link AOrBinop} node
	*/
	public void caseAOrBinop(AOrBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAOrBinop(node);


		outAOrBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AOrBinop} node from {@link AOrBinop#apply(IAnalysis)}.
	* @param node the calling {@link AOrBinop} node
	*/
	public void inAOrBinop(AOrBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link AOrBinop} node from {@link AOrBinop#apply(IAnalysis)}.
	* @param node the calling {@link AOrBinop} node
	*/
	public void outAOrBinop(AOrBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link AAndBinop} node from {@link AAndBinop#apply(IAnalysis)}.
	* @param node the calling {@link AAndBinop} node
	*/
	public void caseAAndBinop(AAndBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAAndBinop(node);


		outAAndBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AAndBinop} node from {@link AAndBinop#apply(IAnalysis)}.
	* @param node the calling {@link AAndBinop} node
	*/
	public void inAAndBinop(AAndBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link AAndBinop} node from {@link AAndBinop#apply(IAnalysis)}.
	* @param node the calling {@link AAndBinop} node
	*/
	public void outAAndBinop(AAndBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link AImpliesBinop} node from {@link AImpliesBinop#apply(IAnalysis)}.
	* @param node the calling {@link AImpliesBinop} node
	*/
	public void caseAImpliesBinop(AImpliesBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAImpliesBinop(node);


		outAImpliesBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AImpliesBinop} node from {@link AImpliesBinop#apply(IAnalysis)}.
	* @param node the calling {@link AImpliesBinop} node
	*/
	public void inAImpliesBinop(AImpliesBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link AImpliesBinop} node from {@link AImpliesBinop#apply(IAnalysis)}.
	* @param node the calling {@link AImpliesBinop} node
	*/
	public void outAImpliesBinop(AImpliesBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link AEquivBinop} node from {@link AEquivBinop#apply(IAnalysis)}.
	* @param node the calling {@link AEquivBinop} node
	*/
	public void caseAEquivBinop(AEquivBinop node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAEquivBinop(node);


		outAEquivBinop(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AEquivBinop} node from {@link AEquivBinop#apply(IAnalysis)}.
	* @param node the calling {@link AEquivBinop} node
	*/
	public void inAEquivBinop(AEquivBinop node) throws Throwable
	{
		defaultInPBinop(node);
	}


	/**
	* Called by the {@link AEquivBinop} node from {@link AEquivBinop#apply(IAnalysis)}.
	* @param node the calling {@link AEquivBinop} node
	*/
	public void outAEquivBinop(AEquivBinop node) throws Throwable
	{
		defaultOutPBinop(node);
	}


	/**
	* Called by the {@link PDomain} node from {@link PDomain#apply(IAnalysis)}.
	* @param node the calling {@link PDomain} node
	*/
	public void defaultInPDomain(PDomain node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PDomain} node from {@link PDomain#apply(IAnalysis)}.
	* @param node the calling {@link PDomain} node
	*/
	public void defaultOutPDomain(PDomain node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link PDomain} node from {@link PDomain#apply(IAnalysis)}.
	* @param node the calling {@link PDomain} node
	*/
	public void inPDomain(PDomain node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PDomain} node from {@link PDomain#apply(IAnalysis)}.
	* @param node the calling {@link PDomain} node
	*/
	public void outPDomain(PDomain node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link ADeDomain} node from {@link ADeDomain#apply(IAnalysis)}.
	* @param node the calling {@link ADeDomain} node
	*/
	public void caseADeDomain(ADeDomain node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inADeDomain(node);


		outADeDomain(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ADeDomain} node from {@link ADeDomain#apply(IAnalysis)}.
	* @param node the calling {@link ADeDomain} node
	*/
	public void inADeDomain(ADeDomain node) throws Throwable
	{
		defaultInPDomain(node);
	}


	/**
	* Called by the {@link ADeDomain} node from {@link ADeDomain#apply(IAnalysis)}.
	* @param node the calling {@link ADeDomain} node
	*/
	public void outADeDomain(ADeDomain node) throws Throwable
	{
		defaultOutPDomain(node);
	}


	/**
	* Called by the {@link ACtDomain} node from {@link ACtDomain#apply(IAnalysis)}.
	* @param node the calling {@link ACtDomain} node
	*/
	public void caseACtDomain(ACtDomain node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inACtDomain(node);


		outACtDomain(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ACtDomain} node from {@link ACtDomain#apply(IAnalysis)}.
	* @param node the calling {@link ACtDomain} node
	*/
	public void inACtDomain(ACtDomain node) throws Throwable
	{
		defaultInPDomain(node);
	}


	/**
	* Called by the {@link ACtDomain} node from {@link ACtDomain#apply(IAnalysis)}.
	* @param node the calling {@link ACtDomain} node
	*/
	public void outACtDomain(ACtDomain node) throws Throwable
	{
		defaultOutPDomain(node);
	}


	/**
	* Called by the {@link PExp} node from {@link PExp#apply(IAnalysis)}.
	* @param node the calling {@link PExp} node
	*/
	public void defaultInPExp(PExp node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PExp} node from {@link PExp#apply(IAnalysis)}.
	* @param node the calling {@link PExp} node
	*/
	public void defaultOutPExp(PExp node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link PExp} node from {@link PExp#apply(IAnalysis)}.
	* @param node the calling {@link PExp} node
	*/
	public void inPExp(PExp node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PExp} node from {@link PExp#apply(IAnalysis)}.
	* @param node the calling {@link PExp} node
	*/
	public void outPExp(PExp node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link SSingleExp} node from {@link SSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link SSingleExp} node
	*/
	public void defaultInSSingleExp(SSingleExp node) throws Throwable
	{
		defaultInPExp(node);
	}


	/**
	* Called by the {@link SSingleExp} node from {@link SSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link SSingleExp} node
	*/
	public void defaultOutSSingleExp(SSingleExp node) throws Throwable
	{
		defaultOutPExp(node);
	}


	/**
	* Called by the {@link SSingleExp} node from {@link SSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link SSingleExp} node
	*/
	public void inSSingleExp(SSingleExp node) throws Throwable
	{
		defaultInPExp(node);
	}


	/**
	* Called by the {@link SSingleExp} node from {@link SSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link SSingleExp} node
	*/
	public void outSSingleExp(SSingleExp node) throws Throwable
	{
		defaultOutPExp(node);
	}


	/**
	* Called by the {@link AUnaryExp} node from {@link AUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AUnaryExp} node
	*/
	public void caseAUnaryExp(AUnaryExp node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAUnaryExp(node);

		if(node.getOperator() != null) {
			node.getOperator().apply(this);
		}
		if(node.getExp() != null) {
			node.getExp().apply(this);
		}

		outAUnaryExp(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AUnaryExp} node from {@link AUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AUnaryExp} node
	*/
	public void inAUnaryExp(AUnaryExp node) throws Throwable
	{
		defaultInPExp(node);
	}


	/**
	* Called by the {@link AUnaryExp} node from {@link AUnaryExp#apply(IAnalysis)}.
	* @param node the calling {@link AUnaryExp} node
	*/
	public void outAUnaryExp(AUnaryExp node) throws Throwable
	{
		defaultOutPExp(node);
	}


	/**
	* Called by the {@link ABinaryExp} node from {@link ABinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ABinaryExp} node
	*/
	public void caseABinaryExp(ABinaryExp node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inABinaryExp(node);

		if(node.getLeft() != null) {
			node.getLeft().apply(this);
		}
		if(node.getOperator() != null) {
			node.getOperator().apply(this);
		}
		if(node.getRight() != null) {
			node.getRight().apply(this);
		}

		outABinaryExp(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ABinaryExp} node from {@link ABinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ABinaryExp} node
	*/
	public void inABinaryExp(ABinaryExp node) throws Throwable
	{
		defaultInPExp(node);
	}


	/**
	* Called by the {@link ABinaryExp} node from {@link ABinaryExp#apply(IAnalysis)}.
	* @param node the calling {@link ABinaryExp} node
	*/
	public void outABinaryExp(ABinaryExp node) throws Throwable
	{
		defaultOutPExp(node);
	}


	/**
	* Called by the {@link ABoolSingleExp} node from {@link ABoolSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link ABoolSingleExp} node
	*/
	public void caseABoolSingleExp(ABoolSingleExp node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inABoolSingleExp(node);


		outABoolSingleExp(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ABoolSingleExp} node from {@link ABoolSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link ABoolSingleExp} node
	*/
	public void inABoolSingleExp(ABoolSingleExp node) throws Throwable
	{
		defaultInSSingleExp(node);
	}


	/**
	* Called by the {@link ABoolSingleExp} node from {@link ABoolSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link ABoolSingleExp} node
	*/
	public void outABoolSingleExp(ABoolSingleExp node) throws Throwable
	{
		defaultOutSSingleExp(node);
	}


	/**
	* Called by the {@link ANumericalSingleExp} node from {@link ANumericalSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link ANumericalSingleExp} node
	*/
	public void caseANumericalSingleExp(ANumericalSingleExp node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inANumericalSingleExp(node);


		outANumericalSingleExp(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ANumericalSingleExp} node from {@link ANumericalSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link ANumericalSingleExp} node
	*/
	public void inANumericalSingleExp(ANumericalSingleExp node) throws Throwable
	{
		defaultInSSingleExp(node);
	}


	/**
	* Called by the {@link ANumericalSingleExp} node from {@link ANumericalSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link ANumericalSingleExp} node
	*/
	public void outANumericalSingleExp(ANumericalSingleExp node) throws Throwable
	{
		defaultOutSSingleExp(node);
	}


	/**
	* Called by the {@link ATimeSingleExp} node from {@link ATimeSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link ATimeSingleExp} node
	*/
	public void caseATimeSingleExp(ATimeSingleExp node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inATimeSingleExp(node);

		if(node.getUnit() != null) {
			node.getUnit().apply(this);
		}

		outATimeSingleExp(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ATimeSingleExp} node from {@link ATimeSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link ATimeSingleExp} node
	*/
	public void inATimeSingleExp(ATimeSingleExp node) throws Throwable
	{
		defaultInSSingleExp(node);
	}


	/**
	* Called by the {@link ATimeSingleExp} node from {@link ATimeSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link ATimeSingleExp} node
	*/
	public void outATimeSingleExp(ATimeSingleExp node) throws Throwable
	{
		defaultOutSSingleExp(node);
	}


	/**
	* Called by the {@link AIdentifierSingleExp} node from {@link AIdentifierSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierSingleExp} node
	*/
	public void caseAIdentifierSingleExp(AIdentifierSingleExp node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAIdentifierSingleExp(node);

		if(node.getDomain() != null) {
			node.getDomain().apply(this);
		}
		if(node.getType() != null) {
			node.getType().apply(this);
		}

		outAIdentifierSingleExp(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AIdentifierSingleExp} node from {@link AIdentifierSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierSingleExp} node
	*/
	public void inAIdentifierSingleExp(AIdentifierSingleExp node) throws Throwable
	{
		defaultInSSingleExp(node);
	}


	/**
	* Called by the {@link AIdentifierSingleExp} node from {@link AIdentifierSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link AIdentifierSingleExp} node
	*/
	public void outAIdentifierSingleExp(AIdentifierSingleExp node) throws Throwable
	{
		defaultOutSSingleExp(node);
	}


	/**
	* Called by the {@link ASystemTimeSingleExp} node from {@link ASystemTimeSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link ASystemTimeSingleExp} node
	*/
	public void caseASystemTimeSingleExp(ASystemTimeSingleExp node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inASystemTimeSingleExp(node);


		outASystemTimeSingleExp(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ASystemTimeSingleExp} node from {@link ASystemTimeSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link ASystemTimeSingleExp} node
	*/
	public void inASystemTimeSingleExp(ASystemTimeSingleExp node) throws Throwable
	{
		defaultInSSingleExp(node);
	}


	/**
	* Called by the {@link ASystemTimeSingleExp} node from {@link ASystemTimeSingleExp#apply(IAnalysis)}.
	* @param node the calling {@link ASystemTimeSingleExp} node
	*/
	public void outASystemTimeSingleExp(ASystemTimeSingleExp node) throws Throwable
	{
		defaultOutSSingleExp(node);
	}


	/**
	* Called by the {@link PTimeunit} node from {@link PTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link PTimeunit} node
	*/
	public void defaultInPTimeunit(PTimeunit node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PTimeunit} node from {@link PTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link PTimeunit} node
	*/
	public void defaultOutPTimeunit(PTimeunit node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link PTimeunit} node from {@link PTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link PTimeunit} node
	*/
	public void inPTimeunit(PTimeunit node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PTimeunit} node from {@link PTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link PTimeunit} node
	*/
	public void outPTimeunit(PTimeunit node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link AUsTimeunit} node from {@link AUsTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link AUsTimeunit} node
	*/
	public void caseAUsTimeunit(AUsTimeunit node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAUsTimeunit(node);


		outAUsTimeunit(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AUsTimeunit} node from {@link AUsTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link AUsTimeunit} node
	*/
	public void inAUsTimeunit(AUsTimeunit node) throws Throwable
	{
		defaultInPTimeunit(node);
	}


	/**
	* Called by the {@link AUsTimeunit} node from {@link AUsTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link AUsTimeunit} node
	*/
	public void outAUsTimeunit(AUsTimeunit node) throws Throwable
	{
		defaultOutPTimeunit(node);
	}


	/**
	* Called by the {@link AMsTimeunit} node from {@link AMsTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link AMsTimeunit} node
	*/
	public void caseAMsTimeunit(AMsTimeunit node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAMsTimeunit(node);


		outAMsTimeunit(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AMsTimeunit} node from {@link AMsTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link AMsTimeunit} node
	*/
	public void inAMsTimeunit(AMsTimeunit node) throws Throwable
	{
		defaultInPTimeunit(node);
	}


	/**
	* Called by the {@link AMsTimeunit} node from {@link AMsTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link AMsTimeunit} node
	*/
	public void outAMsTimeunit(AMsTimeunit node) throws Throwable
	{
		defaultOutPTimeunit(node);
	}


	/**
	* Called by the {@link ASTimeunit} node from {@link ASTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link ASTimeunit} node
	*/
	public void caseASTimeunit(ASTimeunit node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inASTimeunit(node);


		outASTimeunit(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ASTimeunit} node from {@link ASTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link ASTimeunit} node
	*/
	public void inASTimeunit(ASTimeunit node) throws Throwable
	{
		defaultInPTimeunit(node);
	}


	/**
	* Called by the {@link ASTimeunit} node from {@link ASTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link ASTimeunit} node
	*/
	public void outASTimeunit(ASTimeunit node) throws Throwable
	{
		defaultOutPTimeunit(node);
	}


	/**
	* Called by the {@link AMTimeunit} node from {@link AMTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link AMTimeunit} node
	*/
	public void caseAMTimeunit(AMTimeunit node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAMTimeunit(node);


		outAMTimeunit(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AMTimeunit} node from {@link AMTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link AMTimeunit} node
	*/
	public void inAMTimeunit(AMTimeunit node) throws Throwable
	{
		defaultInPTimeunit(node);
	}


	/**
	* Called by the {@link AMTimeunit} node from {@link AMTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link AMTimeunit} node
	*/
	public void outAMTimeunit(AMTimeunit node) throws Throwable
	{
		defaultOutPTimeunit(node);
	}


	/**
	* Called by the {@link AHTimeunit} node from {@link AHTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link AHTimeunit} node
	*/
	public void caseAHTimeunit(AHTimeunit node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAHTimeunit(node);


		outAHTimeunit(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AHTimeunit} node from {@link AHTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link AHTimeunit} node
	*/
	public void inAHTimeunit(AHTimeunit node) throws Throwable
	{
		defaultInPTimeunit(node);
	}


	/**
	* Called by the {@link AHTimeunit} node from {@link AHTimeunit#apply(IAnalysis)}.
	* @param node the calling {@link AHTimeunit} node
	*/
	public void outAHTimeunit(AHTimeunit node) throws Throwable
	{
		defaultOutPTimeunit(node);
	}


	/**
	* Called by the {@link PStm} node from {@link PStm#apply(IAnalysis)}.
	* @param node the calling {@link PStm} node
	*/
	public void defaultInPStm(PStm node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PStm} node from {@link PStm#apply(IAnalysis)}.
	* @param node the calling {@link PStm} node
	*/
	public void defaultOutPStm(PStm node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link PStm} node from {@link PStm#apply(IAnalysis)}.
	* @param node the calling {@link PStm} node
	*/
	public void inPStm(PStm node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PStm} node from {@link PStm#apply(IAnalysis)}.
	* @param node the calling {@link PStm} node
	*/
	public void outPStm(PStm node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link AWhenStm} node from {@link AWhenStm#apply(IAnalysis)}.
	* @param node the calling {@link AWhenStm} node
	*/
	public void caseAWhenStm(AWhenStm node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAWhenStm(node);

		if(node.getTest() != null) {
			node.getTest().apply(this);
		}
		{
			List<PStm> copy = new ArrayList<PStm>(node.getThen());
			for( PStm e : copy) {
				e.apply(this);
			}
		}
		{
			List<ARevertStm> copy = new ArrayList<ARevertStm>(node.getAfter());
			for( ARevertStm e : copy) {
				e.apply(this);
			}
		}
		if(node.getFor() != null) {
			node.getFor().apply(this);
		}

		outAWhenStm(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AWhenStm} node from {@link AWhenStm#apply(IAnalysis)}.
	* @param node the calling {@link AWhenStm} node
	*/
	public void inAWhenStm(AWhenStm node) throws Throwable
	{
		defaultInPStm(node);
	}


	/**
	* Called by the {@link AWhenStm} node from {@link AWhenStm#apply(IAnalysis)}.
	* @param node the calling {@link AWhenStm} node
	*/
	public void outAWhenStm(AWhenStm node) throws Throwable
	{
		defaultOutPStm(node);
	}


	/**
	* Called by the {@link AOnceStm} node from {@link AOnceStm#apply(IAnalysis)}.
	* @param node the calling {@link AOnceStm} node
	*/
	public void caseAOnceStm(AOnceStm node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAOnceStm(node);

		if(node.getTest() != null) {
			node.getTest().apply(this);
		}
		{
			List<PStm> copy = new ArrayList<PStm>(node.getThen());
			for( PStm e : copy) {
				e.apply(this);
			}
		}
		{
			List<ARevertStm> copy = new ArrayList<ARevertStm>(node.getAfter());
			for( ARevertStm e : copy) {
				e.apply(this);
			}
		}
		if(node.getFor() != null) {
			node.getFor().apply(this);
		}

		outAOnceStm(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AOnceStm} node from {@link AOnceStm#apply(IAnalysis)}.
	* @param node the calling {@link AOnceStm} node
	*/
	public void inAOnceStm(AOnceStm node) throws Throwable
	{
		defaultInPStm(node);
	}


	/**
	* Called by the {@link AOnceStm} node from {@link AOnceStm#apply(IAnalysis)}.
	* @param node the calling {@link AOnceStm} node
	*/
	public void outAOnceStm(AOnceStm node) throws Throwable
	{
		defaultOutPStm(node);
	}


	/**
	* Called by the {@link AAssignStm} node from {@link AAssignStm#apply(IAnalysis)}.
	* @param node the calling {@link AAssignStm} node
	*/
	public void caseAAssignStm(AAssignStm node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAAssignStm(node);

		if(node.getDomain() != null) {
			node.getDomain().apply(this);
		}
		if(node.getValue() != null) {
			node.getValue().apply(this);
		}

		outAAssignStm(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AAssignStm} node from {@link AAssignStm#apply(IAnalysis)}.
	* @param node the calling {@link AAssignStm} node
	*/
	public void inAAssignStm(AAssignStm node) throws Throwable
	{
		defaultInPStm(node);
	}


	/**
	* Called by the {@link AAssignStm} node from {@link AAssignStm#apply(IAnalysis)}.
	* @param node the calling {@link AAssignStm} node
	*/
	public void outAAssignStm(AAssignStm node) throws Throwable
	{
		defaultOutPStm(node);
	}


	/**
	* Called by the {@link ARevertStm} node from {@link ARevertStm#apply(IAnalysis)}.
	* @param node the calling {@link ARevertStm} node
	*/
	public void caseARevertStm(ARevertStm node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inARevertStm(node);

		if(node.getIdentifier() != null) {
			node.getIdentifier().apply(this);
		}

		outARevertStm(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ARevertStm} node from {@link ARevertStm#apply(IAnalysis)}.
	* @param node the calling {@link ARevertStm} node
	*/
	public void inARevertStm(ARevertStm node) throws Throwable
	{
		defaultInPStm(node);
	}


	/**
	* Called by the {@link ARevertStm} node from {@link ARevertStm#apply(IAnalysis)}.
	* @param node the calling {@link ARevertStm} node
	*/
	public void outARevertStm(ARevertStm node) throws Throwable
	{
		defaultOutPStm(node);
	}


	/**
	* Called by the {@link SMessageStm} node from {@link SMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link SMessageStm} node
	*/
	public void defaultInSMessageStm(SMessageStm node) throws Throwable
	{
		defaultInPStm(node);
	}


	/**
	* Called by the {@link SMessageStm} node from {@link SMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link SMessageStm} node
	*/
	public void defaultOutSMessageStm(SMessageStm node) throws Throwable
	{
		defaultOutPStm(node);
	}


	/**
	* Called by the {@link SMessageStm} node from {@link SMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link SMessageStm} node
	*/
	public void inSMessageStm(SMessageStm node) throws Throwable
	{
		defaultInPStm(node);
	}


	/**
	* Called by the {@link SMessageStm} node from {@link SMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link SMessageStm} node
	*/
	public void outSMessageStm(SMessageStm node) throws Throwable
	{
		defaultOutPStm(node);
	}


	/**
	* Called by the {@link AQuitStm} node from {@link AQuitStm#apply(IAnalysis)}.
	* @param node the calling {@link AQuitStm} node
	*/
	public void caseAQuitStm(AQuitStm node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAQuitStm(node);


		outAQuitStm(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AQuitStm} node from {@link AQuitStm#apply(IAnalysis)}.
	* @param node the calling {@link AQuitStm} node
	*/
	public void inAQuitStm(AQuitStm node) throws Throwable
	{
		defaultInPStm(node);
	}


	/**
	* Called by the {@link AQuitStm} node from {@link AQuitStm#apply(IAnalysis)}.
	* @param node the calling {@link AQuitStm} node
	*/
	public void outAQuitStm(AQuitStm node) throws Throwable
	{
		defaultOutPStm(node);
	}


	/**
	* Called by the {@link APrintMessageStm} node from {@link APrintMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link APrintMessageStm} node
	*/
	public void caseAPrintMessageStm(APrintMessageStm node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAPrintMessageStm(node);


		outAPrintMessageStm(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link APrintMessageStm} node from {@link APrintMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link APrintMessageStm} node
	*/
	public void inAPrintMessageStm(APrintMessageStm node) throws Throwable
	{
		defaultInSMessageStm(node);
	}


	/**
	* Called by the {@link APrintMessageStm} node from {@link APrintMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link APrintMessageStm} node
	*/
	public void outAPrintMessageStm(APrintMessageStm node) throws Throwable
	{
		defaultOutSMessageStm(node);
	}


	/**
	* Called by the {@link AErrorMessageStm} node from {@link AErrorMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link AErrorMessageStm} node
	*/
	public void caseAErrorMessageStm(AErrorMessageStm node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAErrorMessageStm(node);


		outAErrorMessageStm(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AErrorMessageStm} node from {@link AErrorMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link AErrorMessageStm} node
	*/
	public void inAErrorMessageStm(AErrorMessageStm node) throws Throwable
	{
		defaultInSMessageStm(node);
	}


	/**
	* Called by the {@link AErrorMessageStm} node from {@link AErrorMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link AErrorMessageStm} node
	*/
	public void outAErrorMessageStm(AErrorMessageStm node) throws Throwable
	{
		defaultOutSMessageStm(node);
	}


	/**
	* Called by the {@link AWarnMessageStm} node from {@link AWarnMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link AWarnMessageStm} node
	*/
	public void caseAWarnMessageStm(AWarnMessageStm node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAWarnMessageStm(node);


		outAWarnMessageStm(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AWarnMessageStm} node from {@link AWarnMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link AWarnMessageStm} node
	*/
	public void inAWarnMessageStm(AWarnMessageStm node) throws Throwable
	{
		defaultInSMessageStm(node);
	}


	/**
	* Called by the {@link AWarnMessageStm} node from {@link AWarnMessageStm#apply(IAnalysis)}.
	* @param node the calling {@link AWarnMessageStm} node
	*/
	public void outAWarnMessageStm(AWarnMessageStm node) throws Throwable
	{
		defaultOutSMessageStm(node);
	}


	/**
	* Called by the {@link PType} node from {@link PType#apply(IAnalysis)}.
	* @param node the calling {@link PType} node
	*/
	public void defaultInPType(PType node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PType} node from {@link PType#apply(IAnalysis)}.
	* @param node the calling {@link PType} node
	*/
	public void defaultOutPType(PType node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link PType} node from {@link PType#apply(IAnalysis)}.
	* @param node the calling {@link PType} node
	*/
	public void inPType(PType node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PType} node from {@link PType#apply(IAnalysis)}.
	* @param node the calling {@link PType} node
	*/
	public void outPType(PType node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link ARealType} node from {@link ARealType#apply(IAnalysis)}.
	* @param node the calling {@link ARealType} node
	*/
	public void caseARealType(ARealType node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inARealType(node);


		outARealType(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ARealType} node from {@link ARealType#apply(IAnalysis)}.
	* @param node the calling {@link ARealType} node
	*/
	public void inARealType(ARealType node) throws Throwable
	{
		defaultInPType(node);
	}


	/**
	* Called by the {@link ARealType} node from {@link ARealType#apply(IAnalysis)}.
	* @param node the calling {@link ARealType} node
	*/
	public void outARealType(ARealType node) throws Throwable
	{
		defaultOutPType(node);
	}


	/**
	* Called by the {@link AIntType} node from {@link AIntType#apply(IAnalysis)}.
	* @param node the calling {@link AIntType} node
	*/
	public void caseAIntType(AIntType node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAIntType(node);


		outAIntType(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AIntType} node from {@link AIntType#apply(IAnalysis)}.
	* @param node the calling {@link AIntType} node
	*/
	public void inAIntType(AIntType node) throws Throwable
	{
		defaultInPType(node);
	}


	/**
	* Called by the {@link AIntType} node from {@link AIntType#apply(IAnalysis)}.
	* @param node the calling {@link AIntType} node
	*/
	public void outAIntType(AIntType node) throws Throwable
	{
		defaultOutPType(node);
	}


	/**
	* Called by the {@link ABoolType} node from {@link ABoolType#apply(IAnalysis)}.
	* @param node the calling {@link ABoolType} node
	*/
	public void caseABoolType(ABoolType node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inABoolType(node);


		outABoolType(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ABoolType} node from {@link ABoolType#apply(IAnalysis)}.
	* @param node the calling {@link ABoolType} node
	*/
	public void inABoolType(ABoolType node) throws Throwable
	{
		defaultInPType(node);
	}


	/**
	* Called by the {@link ABoolType} node from {@link ABoolType#apply(IAnalysis)}.
	* @param node the calling {@link ABoolType} node
	*/
	public void outABoolType(ABoolType node) throws Throwable
	{
		defaultOutPType(node);
	}


	/**
	* Called by the {@link ATimeType} node from {@link ATimeType#apply(IAnalysis)}.
	* @param node the calling {@link ATimeType} node
	*/
	public void caseATimeType(ATimeType node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inATimeType(node);


		outATimeType(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link ATimeType} node from {@link ATimeType#apply(IAnalysis)}.
	* @param node the calling {@link ATimeType} node
	*/
	public void inATimeType(ATimeType node) throws Throwable
	{
		defaultInPType(node);
	}


	/**
	* Called by the {@link ATimeType} node from {@link ATimeType#apply(IAnalysis)}.
	* @param node the calling {@link ATimeType} node
	*/
	public void outATimeType(ATimeType node) throws Throwable
	{
		defaultOutPType(node);
	}


	/**
	* Called by the {@link PInclude} node from {@link PInclude#apply(IAnalysis)}.
	* @param node the calling {@link PInclude} node
	*/
	public void defaultInPInclude(PInclude node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PInclude} node from {@link PInclude#apply(IAnalysis)}.
	* @param node the calling {@link PInclude} node
	*/
	public void defaultOutPInclude(PInclude node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link PInclude} node from {@link PInclude#apply(IAnalysis)}.
	* @param node the calling {@link PInclude} node
	*/
	public void inPInclude(PInclude node) throws Throwable
	{
		defaultInINode(node);
	}


	/**
	* Called by the {@link PInclude} node from {@link PInclude#apply(IAnalysis)}.
	* @param node the calling {@link PInclude} node
	*/
	public void outPInclude(PInclude node) throws Throwable
	{
		defaultOutINode(node);
	}


	/**
	* Called by the {@link AScriptInclude} node from {@link AScriptInclude#apply(IAnalysis)}.
	* @param node the calling {@link AScriptInclude} node
	*/
	public void caseAScriptInclude(AScriptInclude node) throws Throwable
	{
		if(_queue.contains(node))
		{ //already visiting this node from other path
			return;
		}
		_queue.add(node);
		inAScriptInclude(node);


		outAScriptInclude(node);
		_queue.remove(node);

	}


	/**
	* Called by the {@link AScriptInclude} node from {@link AScriptInclude#apply(IAnalysis)}.
	* @param node the calling {@link AScriptInclude} node
	*/
	public void inAScriptInclude(AScriptInclude node) throws Throwable
	{
		defaultInPInclude(node);
	}


	/**
	* Called by the {@link AScriptInclude} node from {@link AScriptInclude#apply(IAnalysis)}.
	* @param node the calling {@link AScriptInclude} node
	*/
	public void outAScriptInclude(AScriptInclude node) throws Throwable
	{
		defaultOutPInclude(node);
	}


	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public void defaultOutINode(INode node) throws Throwable
	{
		//nothing to do
	}


	/**
	* Called by the {@link INode} node from {@link INode#apply(IAnalysis)}.
	* @param node the calling {@link INode} node
	*/
	public void defaultInINode(INode node) throws Throwable
	{
		//nothing to do
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void defaultOutIToken(IToken node) throws Throwable
	{
		//nothing to do
	}


	/**
	* Called by the {@link IToken} node from {@link IToken#apply(IAnalysis)}.
	* @param node the calling {@link IToken} node
	*/
	public void defaultInIToken(IToken node) throws Throwable
	{
		//nothing to do
	}



}
