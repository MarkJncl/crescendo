/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.destecs.script.ast.expressions;


import org.destecs.script.ast.analysis.intf.IAnalysis;
import java.util.Map;
import java.lang.Double;
import org.destecs.script.ast.expressions.ESingleExp;
import org.destecs.script.ast.analysis.intf.IQuestion;
import org.destecs.script.ast.expressions.SSingleExpBase;
import org.destecs.script.ast.node.INode;
import java.lang.String;
import org.destecs.script.ast.analysis.intf.IAnswer;
import org.destecs.script.ast.analysis.intf.IQuestionAnswer;
import org.destecs.script.ast.expressions.ANumericalSingleExp;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class ANumericalSingleExp extends SSingleExpBase
{
	private static final long serialVersionUID = 1L;

	private Double _value;

	/**
	* Creates a new {@code ANumericalSingleExp} node with the given nodes as children.
	* The basic child nodes are removed from their previous parents.
	* @param value_ the {@link Double} node for the {@code value} child of this {@link ANumericalSingleExp} node
	*/
	public ANumericalSingleExp(Double value_)
	{
		super();
		this.setValue(value_);

	}



	/**
	 * Creates a new {@link ANumericalSingleExp} node with no children.
	 */
	public ANumericalSingleExp()
	{

	}




	/**
	 * Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o) {
	if (o != null && o instanceof ANumericalSingleExp)
	 return toString().equals(o.toString());
	return false; }
	
	/**
	 * Returns the {@link ESingleExp} corresponding to the
	 * type of this {@link ESingleExp} node.
	 * @return the {@link ESingleExp} for this node
	 */
	@Override
	public ESingleExp kindSSingleExp()
	{
		return ESingleExp.NUMERICAL;
	}



	public String toString()
	{
		return (_value!=null?_value.toString():this.getClass().getSimpleName());
	}


	/**
	 * Returns a deep clone of this {@link ANumericalSingleExp} node.
	 * @return a deep clone of this {@link ANumericalSingleExp} node
	 */
	public ANumericalSingleExp clone()
	{
		return new ANumericalSingleExp(
			_value
		);
	}


	/**
	 * Creates a deep clone of this {@link ANumericalSingleExp} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link ANumericalSingleExp} node
	 */
	public ANumericalSingleExp clone(Map<INode,INode> oldToNewMap)
	{
		ANumericalSingleExp node = new ANumericalSingleExp(
			_value
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link ANumericalSingleExp} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link ANumericalSingleExp} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link ANumericalSingleExp} node
	 */
	public void removeChild(INode child)
	{
		throw new RuntimeException("Not a child.");
	}


	/**
	 * Sets the {@code _value} child of this {@link ANumericalSingleExp} node.
	 * @param value the new {@code _value} child of this {@link ANumericalSingleExp} node
	*/
	public void setValue(Double value)
	{
		this._value = value;
	}


	/**
	 * @return the {@link Double} node which is the {@code _value} child of this {@link ANumericalSingleExp} node
	*/
	public Double getValue()
	{
		return this._value;
	}


	/**
	* Calls the {@link IAnalysis#caseANumericalSingleExp(ANumericalSingleExp)} of the {@link IAnalysis} {@code analysis}.
	* @param analysis the {@link IAnalysis} to which this {@link ANumericalSingleExp} node is applied
	*/
	@Override
	public void apply(IAnalysis analysis)
	{
		analysis.caseANumericalSingleExp(this);
	}


	/**
	* Calls the {@link IAnswer#caseANumericalSingleExp(ANumericalSingleExp)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link ANumericalSingleExp} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller)
	{
		return caller.caseANumericalSingleExp(this);
	}


	/**
	* Calls the {@link IQuestion#caseANumericalSingleExp(ANumericalSingleExp, Object)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link ANumericalSingleExp} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question)
	{
		caller.caseANumericalSingleExp(this, question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseANumericalSingleExp(ANumericalSingleExp, Object)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link ANumericalSingleExp} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question)
	{
		return caller.caseANumericalSingleExp(this, question);
	}



}
