/*******************************************************************************
* Copyright (c) 2009, 2011 Overture Team and others.
*
* Overture is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Overture is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Overture.  If not, see <http://www.gnu.org/licenses/>.
*
* The Overture Tool web-site: http://overturetool.org/
*******************************************************************************/

/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.destecs.script.ast.expressions;


import org.destecs.script.ast.analysis.intf.IAnalysis;
import java.util.Map;
import org.destecs.script.ast.PDomain;
import org.destecs.script.ast.expressions.ESingleExp;
import org.destecs.script.ast.analysis.intf.IQuestion;
import org.destecs.script.ast.expressions.SSingleExpBase;
import org.destecs.script.ast.node.INode;
import java.lang.String;
import org.destecs.script.ast.expressions.AIdentifierSingleExp;
import org.destecs.script.ast.analysis.intf.IAnswer;
import org.destecs.script.ast.types.PType;
import org.destecs.script.ast.analysis.intf.IQuestionAnswer;


/**
* Generated file by AST Creator
* @author Kenneth Lausdahl
*
*/
public class AIdentifierSingleExp extends SSingleExpBase
{
	private static final long serialVersionUID = 1L;

	private PDomain _domain;
	private PType _type;
	private String _name;


	/**
	 * Creates a new {@link AIdentifierSingleExp} node with no children.
	 */
	public AIdentifierSingleExp()
	{

	}


	/**
	* Creates a new {@code AIdentifierSingleExp} node with the given nodes as children.
	* The basic child nodes are removed from their previous parents.
	* @param domain_ the {@link PDomain} node for the {@code domain} child of this {@link AIdentifierSingleExp} node
	* @param type_ the {@link PType} node for the {@code type} child of this {@link AIdentifierSingleExp} node
	* @param name_ the {@link String} node for the {@code name} child of this {@link AIdentifierSingleExp} node
	*/
	public AIdentifierSingleExp(PDomain domain_, PType type_, String name_)
	{
		super();
		this.setDomain(domain_);
		this.setType(type_);
		this.setName(name_);

	}




	/**
	 * Essentially this.toString().equals(o.toString()).
	**/
	@Override
	public boolean equals(Object o) {
	if (o != null && o instanceof AIdentifierSingleExp)
	 return toString().equals(o.toString());
	return false; }
	

	public String toString()
	{
		return (_domain!=null?_domain.toString():this.getClass().getSimpleName())+ (_type!=null?_type.toString():this.getClass().getSimpleName())+ (_name!=null?_name.toString():this.getClass().getSimpleName());
	}


	/**
	 * Returns the {@link ESingleExp} corresponding to the
	 * type of this {@link ESingleExp} node.
	 * @return the {@link ESingleExp} for this node
	 */
	@Override
	public ESingleExp kindSSingleExp()
	{
		return ESingleExp.IDENTIFIER;
	}


	/**
	 * Removes the {@link INode} {@code child} as a child of this {@link AIdentifierSingleExp} node.
	 * Do not call this method with any graph fields of this node. This will cause any child's
	 * with the same reference to be removed unintentionally or {@link RuntimeException}will be thrown.
	 * @param child the child node to be removed from this {@link AIdentifierSingleExp} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link AIdentifierSingleExp} node
	 */
	public void removeChild(INode child)
	{
		if (this._domain == child) {
			this._domain = null;
			return;
		}

		if (this._type == child) {
			this._type = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	/**
	 * Returns a deep clone of this {@link AIdentifierSingleExp} node.
	 * @return a deep clone of this {@link AIdentifierSingleExp} node
	 */
	public AIdentifierSingleExp clone()
	{
		return new AIdentifierSingleExp(
			cloneNode(_domain),
			cloneNode(_type),
			_name
		);
	}


	/**
	 * Creates a deep clone of this {@link AIdentifierSingleExp} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link AIdentifierSingleExp} node
	 */
	public AIdentifierSingleExp clone(Map<INode,INode> oldToNewMap)
	{
		AIdentifierSingleExp node = new AIdentifierSingleExp(
			cloneNode(_domain, oldToNewMap),
			cloneNode(_type, oldToNewMap),
			_name
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	 * Sets the {@code _domain} child of this {@link AIdentifierSingleExp} node.
	 * @param value the new {@code _domain} child of this {@link AIdentifierSingleExp} node
	*/
	public void setDomain(PDomain value)
	{
		if (this._domain != null) {
			this._domain.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._domain = value;

	}


	/**
	 * @return the {@link PDomain} node which is the {@code _domain} child of this {@link AIdentifierSingleExp} node
	*/
	public PDomain getDomain()
	{
		return this._domain;
	}


	/**
	 * Sets the {@code _type} child of this {@link AIdentifierSingleExp} node.
	 * @param value the new {@code _type} child of this {@link AIdentifierSingleExp} node
	*/
	public void setType(PType value)
	{
		if (this._type != null) {
			this._type.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._type = value;

	}


	/**
	 * @return the {@link PType} node which is the {@code _type} child of this {@link AIdentifierSingleExp} node
	*/
	public PType getType()
	{
		return this._type;
	}


	/**
	 * Sets the {@code _name} child of this {@link AIdentifierSingleExp} node.
	 * @param value the new {@code _name} child of this {@link AIdentifierSingleExp} node
	*/
	public void setName(String value)
	{
		this._name = value;
	}


	/**
	 * @return the {@link String} node which is the {@code _name} child of this {@link AIdentifierSingleExp} node
	*/
	public String getName()
	{
		return this._name;
	}


	/**
	* Calls the {@link IAnalysis#caseAIdentifierSingleExp(AIdentifierSingleExp)} of the {@link IAnalysis} {@code analysis}.
	* @param analysis the {@link IAnalysis} to which this {@link AIdentifierSingleExp} node is applied
	*/
	@Override
	public void apply(IAnalysis analysis)
	{
		analysis.caseAIdentifierSingleExp(this);
	}


	/**
	* Calls the {@link IAnswer#caseAIdentifierSingleExp(AIdentifierSingleExp)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link AIdentifierSingleExp} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller)
	{
		return caller.caseAIdentifierSingleExp(this);
	}


	/**
	* Calls the {@link IQuestion#caseAIdentifierSingleExp(AIdentifierSingleExp, Object)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link AIdentifierSingleExp} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question)
	{
		caller.caseAIdentifierSingleExp(this, question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseAIdentifierSingleExp(AIdentifierSingleExp, Object)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link AIdentifierSingleExp} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question)
	{
		return caller.caseAIdentifierSingleExp(this, question);
	}



}
