<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="protocol.xsl"?>
<XML-RPC_Library xsi:noNamespaceSchemaLocation="xml-rpc_library.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<schemeVersion>
		<major>1</major>
		<minor>0</minor>
		<revision>0</revision>
		<patch>0</patch>
	</schemeVersion>
	<name>Destecs</name>
	<interfaceVersion>
		<major>3</major>
		<minor>0</minor>
		<revision>3</revision>
	</interfaceVersion>
	<implementationVersion>
		<major>3</major>
		<minor>0</minor>
		<revision>0</revision>
		<patch>0</patch>
	</implementationVersion>
	<description><![CDATA[
Normal control flow of the protocol:<br/>

Text:
<ol>

<li>Check the protocol version
<li>Initialize the tool for Co-Simulation
<li>Load a model
<li>Check the models interface
<li>*Get shared design parameters and check agains contract - included in query interface
<li>Set shared design parameters with values from scenario
<li>Get all parameters check if they need to be set form scenario. This is parameters only relevant to the current tool
<li>Set all parameters for the tool from the scenario
<li>Start the simulator
<li>Step until simulation completed it's time
<li>Stop the simulator. No future simulation is possible after this call.
<li>Terminate the external tool if no more simulations should be performed
</ol>

Commands:
<ol>

<li>getVersion
<li>initialize
<li>load
<li>queryInterface
<li>getDesignParameters
<li>setDesignParameters
<li>getParameters
<li>setParameters
<li>start
<li>step
<li>stop
<li>terminate

</ol>

Commands that can be fired at any point:
<ul>

<li>GetStatus

</ul>
]]></description>
	<methods>
		<!--getVersion-->
		<method>
			<description>Gets the name and version of the simulator in the form: name / majorVersion.MinorVersion.revision.patch</description>
			<methodCall>
				<methodName>destecs.getVersion</methodName>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>name</name>
									<value>
										<string>20-sim</string>
									</value>
									<description>The name of the simulator program</description>
								</member>
								<member>
									<name>version</name>
									<value>
										<string>4.2.3.3000</string>
									</value>
									<description>The version of the tool/simulator : major.minor.build.patch</description>
								</member>
								<member>
									<name>interfaceVersion</name>
									<value>
										<string>3.0.2.0</string>
									</value>
									<description>The interface version : major.minor.build.patch</description>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--initialize-->
		<method>
			<description>Initialize the simulator for co-simulation, after calling this function all the other functions should be available, load, step ...</description>
			<methodCall>
				<methodName>destecs.initialize</methodName>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<boolean>true</boolean>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--terminate-->
		<method>
			<description>Terminates the simulator tool. After a reply no futher communication be be posible. The simulator tool will release all resources and terminate.</description>
			<methodCall>
				<methodName>destecs.terminate</methodName>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<boolean>true</boolean>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--load-->
		<method>
			<description>Loads a (model) file from its path. The model is activated and initialized after loading</description>
			<methodCall>
				<methodName>destecs.load</methodName>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>properties</name>
									<value>
										<array>
											<data>
												<value>
													<struct>
														<member>
															<name>key</name>
															<value>
																<string>name</string>
															</value>
														</member>
														<member>
															<name>value</name>
															<value>
																<string>C:\My Models\PID_Controller.emx</string>
															</value>
														</member>
													</struct>
												</value>
											</data>
										</array>
									</value>
									<description>Array with load properties. Each property is a key/value pair. Query defined properties with queryLoad function.</description>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<boolean>true</boolean>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--queryInterface-->
		<method>
			<description>
        Queries the interface used in Co-Simulation Grouped in a Map with keys SharedDesignParameters,DesignParameters,Inputs,Outputs.
        The structure of each of them is a Map from name to value
			</description>
			<methodCall>
				<methodName>destecs.queryInterface</methodName>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>sharedDesignParameters</name>
									<value>
										<array>
											<data>
												<value>
													<struct>
														<member>
															<name>name</name>
															<value>
																<string>name</string>
															</value>
														</member>
														<member>
															<name>size</name>
															<value>
																<array>
																	<data>
																		<value>
																			<int>2</int>
																		</value>
																	</data>
																</array>
															</value>
														</member>
													</struct>
												</value>
											</data>
										</array>
									</value>
								</member>
								<member>
									<name>events</name>
									<value>
										<array>
											<data>
												<value>
													<struct>
														<member>
															<name>name</name>
															<value>
																<string>eventname</string>
															</value>
														</member>
														<member>
															<name>type</name>
															<value>
																<int>0</int>
															</value>
															<description>-1 = eventdown, 0 = event, 1 = eventup</description>
														</member>
													</struct>
												</value>
											</data>
										</array>
									</value>
								</member>
								<member>
									<name>inputs</name>
									<value>
										<array>
											<data>
												<value>
													<struct>
														<member>
															<name>name</name>
															<value>
																<string>name</string>
															</value>
														</member>
														<member>
															<name>size</name>
															<value>
																<array>
																	<data>
																		<value>
																			<int>2</int>
																		</value>
																	</data>
																</array>
															</value>
														</member>
													</struct>
												</value>
											</data>
										</array>
									</value>
								</member>
								<member>
									<name>outputs</name>
									<value>
										<array>
											<data>
												<value>
													<struct>
														<member>
															<name>name</name>
															<value>
																<string>name</string>
															</value>
														</member>
														<member>
															<name>size</name>
															<value>
																<array>
																	<data>
																		<value>
																			<int>2</int>
																		</value>
																	</data>
																</array>
															</value>
														</member>
													</struct>
												</value>
											</data>
										</array>
									</value>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--queryVariables-->
		<method>
			<description>
			Perform a query and return a list of all variables that can be accessed and logged.
			</description>
			<methodCall>
				<methodName>destecs.queryVariables</methodName>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<array>
								<data>
									<value>
										<struct>
											<member>
												<name>name</name>
												<value>
													<string>name</string>
												</value>
											</member>
											<member>
												<name>size</name>
												<value>
													<array>
														<data>
															<value>
																<int>2</int>
															</value>
														</data>
													</array>
												</value>
											</member>
										</struct>
									</value>
								</data>
							</array>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--queryParameters-->
		<method>
			<description>
			Perform a query and return a list of all parameters that can be accessed and logged.
			</description>
			<methodCall>
				<methodName>destecs.queryParameters</methodName>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<array>
								<data>
									<value>
										<struct>
											<member>
												<name>name</name>
												<value>
													<string>name</string>
												</value>
											</member>
											<member>
												<name>size</name>
												<value>
													<array>
														<data>
															<value>
																<int>2</int>
															</value>
														</data>
													</array>
												</value>
											</member>
										</struct>
									</value>
								</data>
							</array>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--QueryImplementations-->
		<method>
			<methodCall>
				<methodName>destecs.queryImplementations</methodName>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<array>
								<data>
									<value>
										<struct>
											<member>
												<name>name</name>
												<value>
													<string>name</string>
												</value>
												<description>The name of the (sub)model</description>
											</member>
											<member>
												<name>implementations</name>
												<value>
													<array><data><value>
														<string>implementationX</string>
													</value></data></array>
												</value>
												<description>List with available implementations for this model</description>
											</member>
											<member>
												<name>implementation</name>
												<value>
													<string>implementationX</string>
												</value>
												<description>The current selected implementation</description>
											</member>
										</struct>
									</value>
								</data>
							</array>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--SetParameters-->
		<method>
			<description>Sets parameters that are *not* used in the co-simulation.</description>
			<methodCall>
				<methodName>destecs.setParameters</methodName>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>parameters</name>
									<value>
										<array>
											<data>
												<value>
													<struct>
														<member>
															<name>name</name>
															<value>
																<string>parName</string>
															</value>
														</member>
														<member>
															<name>size</name>
															<value>
																<array>
																	<data>
																		<value>
																			<int>2</int>
																		</value>
																	</data>
																</array>
															</value>
														</member>
														<member>
															<name>value</name>
															<value>
																<array>
																	<data>
																		<value>
																			<double>3.14159265</double>
																		</value>
																	</data>
																</array>
															</value>
														</member>
													</struct>
												</value>
											</data>
										</array>
									</value>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<boolean>true</boolean>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--SetDesignParameters-->
		<method>
			<description>Sets design parameters that are used in the co-simulation.</description>
			<methodCall>
				<methodName>destecs.setDesignParameters</methodName>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>designParameters</name>
									<value>
										<array>
											<data>
												<value>
													<struct>
														<member>
															<name>name</name>
															<value>
																<string>parName</string>
															</value>
														</member>
														<member>
															<name>size</name>
															<value>
																<array>
																	<data>
																		<value>
																			<int>2</int>
																		</value>
																	</data>
																</array>
															</value>
														</member>
														<member>
															<name>value</name>
															<value>
																<array>
																	<data>
																		<value>
																			<double>3.14159265</double>
																		</value>
																	</data>
																</array>
															</value>
														</member>
													</struct>
												</value>
											</data>
										</array>
									</value>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<boolean>true</boolean>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--SetImplementations-->
		<method>
			<methodCall>
				<methodName>destecs.setImplementations</methodName>
				<params>
					<param>
						<value>
							<array>
								<data>
									<value>
										<struct>
											<member>
												<name>name</name>
												<value>
													<string>name</string>
												</value>
												<description>The name of the (sub)model</description>
											</member>
											<member>
												<name>implementation</name>
												<value>
													<string>implementationX</string>
												</value>
												<description>The implementation to set</description>
											</member>
										</struct>
									</value>
								</data>
							</array>
						</value>
					</param>
				</params>
				</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<boolean>true</boolean>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--GetParameters-->
		<method>
			<description>Gets values from all parameters that are *not* used in the co-simulation.</description>
			<methodCall>
				<methodName>destecs.getParameters</methodName>
				<params>
					<param>
						<value>
							<array><data>
								<value><string>submodelA.parameterB</string></value>
							</data></array>
						</value>
					</param>
				</params>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>parameters</name>
									<value>
										<array>
											<data>
												<value>
													<struct>
														<member>
															<name>name</name>
															<value>
																<string>parName</string>
															</value>
														</member>
														<member>
															<name>size</name>
															<value>
																<array>
																	<data>
																		<value>
																			<int>2</int>
																		</value>
																	</data>
																</array>
															</value>
														</member>
														<member>
															<name>value</name>
															<value>
																<array>
																	<data>
																		<value>
																			<double>3.14159265</double>
																		</value>
																	</data>
																</array>
															</value>
														</member>
													</struct>
												</value>
											</data>
										</array>
									</value>
									<description>name value pairs of all parameters</description>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--getDesignParameters-->
		<method>
			<description>Gets values from all parameters that are used in the co-simulation.</description>
			<methodCall>
				<methodName>destecs.getDesignParameters</methodName>
				<params>
					<param>
						<value>
							<array><data>
								<value><string>submodelA.designParameterB</string></value>
							</data></array>
						</value>
					</param>
				</params>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>designParameters</name>
									<value>
										<array>
											<data>
												<value>
													<struct>
														<member>
															<name>name</name>
															<value>
																<string>parName</string>
															</value>
														</member>
														<member>
															<name>size</name>
															<value>
																<array>
																	<data>
																		<value>
																			<int>2</int>
																		</value>
																	</data>
																</array>
															</value>
														</member>
														<member>
															<name>value</name>
															<value>
																<array>
																	<data>
																		<value>
																			<double>3.14159265</double>
																		</value>
																	</data>
																</array>
															</value>
														</member>
													</struct>
												</value>
											</data>
										</array>
									</value>
									<description>name value pairs of all parameters</description>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--GetVariables-->
		<method>
			<description>Gets values from all variables in the given list.</description>
			<methodCall>
				<methodName>destecs.getVariables</methodName>
				<params>
					<param>
						<value>
							<array><data>
								<value><string>submodelA.variableB</string></value>
							</data></array>
						</value>
					</param>
				</params>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>variables</name>
									<value>
										<array>
											<data>
												<value>
													<struct>
														<member>
															<name>name</name>
															<value>
																<string>varName</string>
															</value>
														</member>
														<member>
															<name>size</name>
															<value>
																<array>
																	<data>
																		<value>
																			<int>2</int>
																		</value>
																	</data>
																</array>
															</value>
														</member>
														<member>
															<name>value</name>
															<value>
																<array>
																	<data>
																		<value>
																			<double>3.14159265</double>
																		</value>
																	</data>
																</array>
															</value>
														</member>
													</struct>
												</value>
											</data>
										</array>
									</value>
									<description>name value pairs of all variables</description>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--step-->
		<method>
			<description>Step is used to progress in simulation, it pushes time forward. A step inputs variables and the step time and returns variables changed during the step and the time at which the next change in the server can take place.</description>
			<methodCall>
				<methodName>destecs.step</methodName>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>singleStep</name>
									<value>
										<boolean>false</boolean>
									</value>
									<description>true=take a single step (do not cross the outputTime), false=take steps untill outputTime has been reached</description>
								</member>
								<member>
									<name>outputTime</name>
									<value>
										<double>1.0</double>
									</value>
									<description>If zero then just take one step (regardless of the singleStep parameter) else take enough steps to reach outputTime unless singleStep is true</description>
								</member>
								<member>
									<name>inputs</name>
									<value>
										<array>
											<data>
												<value>
													<struct>
														<member>
															<name>name</name>
															<value>
																<string>inputname</string>
															</value>
														</member>
														<member>
															<name>size</name>
															<value>
																<array>
																	<data>
																		<value>
																			<int>2</int>
																		</value>
																	</data>
																</array>
															</value>
														</member>
														<member>
															<name>value</name>
															<value>
																<array>
																	<data>
																		<value>
																			<double>3.14159265</double>
																		</value>
																	</data>
																</array>
															</value>
														</member>
													</struct>
												</value>
											</data>
										</array>
									</value>
								</member>
								<member>
									<name>events</name>
									<value>
										<array>
											<data>
												<value>
													<string>eventname</string>
												</value>
											</data>
										</array>
									</value>
									<description>A list of Event causing this Step</description>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>time</name>
									<value>
										<double>1.0</double>
									</value>
									<description>the time that has been reached</description>
								</member>
								<member>
									<name>result</name>
									<value>
										<int>0</int>
									</value>
									<description>0=the step action succeeded, and additional steps can be taken, 1=the step action succeeeded, and the simulation is finished, 2=the step action succeeded, but an event occurred. if failed then the function will return a fault response</description>
								</member>
								<member>
									<name>outputs</name>
									<value>
										<array>
											<data>
												<value>
													<struct>
														<member>
															<name>name</name>
															<value>
																<string>outputname</string>
															</value>
														</member>
														<member>
															<name>size</name>
															<value>
																<array>
																	<data>
																		<value>
																			<int>2</int>
																		</value>
																	</data>
																</array>
															</value>
														</member>
														<member>
															<name>value</name>
															<value>
																<array>
																	<data>
																		<value>
																			<double>3.14159265</double>
																		</value>
																	</data>
																</array>
															</value>
														</member>
													</struct>
												</value>
											</data>
										</array>
									</value>
								</member>
								<member>
									<name>events</name>
									<value>
										<array>
											<data>
												<value>
													<string>eventname</string>
												</value>
											</data>
										</array>
									</value>
									<description>A list of Event names causing the Step to return early</description>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--getStatus-->
		<method>
			<description>Gets the status: 0=Not Initialized, 1=Initialized, 2=Step Taken, not finished, 3=Finished, 4= Loaded</description>
			<methodCall>
				<methodName>destecs.getStatus</methodName>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>status</name>
									<value>
										<int>1</int>
									</value>
									<description>0=Not Initialized, 1=Initialized, 2=Step Taken, not finished, 3=Finished</description>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--start-->
		<method>
			<description>Starts the simulator or interpreter. After this function is called a Step can be taken</description>
			<methodCall>
				<methodName>destecs.start</methodName>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>startTime</name>
									<value>
										<double>0.0</double>
									</value>
									<description>start time of the simulation</description>
								</member>
								<member>
									<name>finishTime</name>
									<value>
										<double>10.0</double>
									</value>
									<description>finish time of the simulation</description>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<boolean>true</boolean>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--stop-->
		<method>
			<description>Stops the simulator or interpreter. After this function is no Steps can be taken and the model cannot be Satrted again</description>
			<methodCall>
				<methodName>destecs.stop</methodName>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<boolean>true</boolean>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--suspend-->
		<method>
			<description>Suspends the simulator or interpreter. After this function is no Steps can be taken. Simulation may be stopped</description>
			<methodCall>
				<methodName>destecs.suspend</methodName>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<boolean>true</boolean>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--resume-->
		<method>
			<description>Resumes the simulator or interpreter from suspended state. (Does nothing if state was not suspended)</description>
			<methodCall>
				<methodName>destecs.resume</methodName>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<boolean>true</boolean>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>	
		<!--SetSetting-->
		<method>
			<description>Set a setting.</description>
			<methodCall>
				<methodName>destecs.setSettings</methodName>
				<params>
					<param>
						<value><array><data>
							<value>
								<struct>
									<member>
										<name>key</name>
										<value>
											<string>model.integrationmethod</string>
										</value>
										<description>The key (name) of the setting is an hierarchical path. In the key, for example, the first level may denote a model or tool setting.</description>
									</member>
									<member>
										<name>value</name>
										<value>
											<string>Euler</string>
										</value>
										<description>The value belonging to the spefied key, in string format</description>
									</member>
								</struct>
							</value>
						</data></array></value>
					</param>
				</params>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<boolean>true</boolean>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--QuerySettings-->
		<method>
			<methodCall>
				<methodName>destecs.querySettings</methodName>
				<params>
					<param>
						<value>
							<array><data>
								<value><string>model.settingX</string></value>
							</data></array>
						</value>
					</param>
				</params>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<array>
								<data>
									<value>
										<struct>
											<member>
												<name>key</name>
												<value>
													<string>model.integrationmethod</string>
												</value>
												<description>The key (name) of the setting is an hierarchical path. In the key, for example, the first level may denote a model or tool setting.</description>
											</member>
											<member>
												<name>value</name>
												<value>
													<string>Euler</string>
												</value>
												<description>The value belonging to the spefied key, in string format</description>
											</member>
											<member>
												<name>type</name>
												<value>
													<string>type</string>
												</value>
												<description>The type of the value : int, string, double, boolean (any xmlrpc scalar type)</description>
											</member>
											<member>
												<name>enumerations</name>
												<value>
													<array>
														<data>
															<value>
																<string>Euler</string>
															</value>
														</data>
													</array>
												</value>
												<description>If the key contains a set of values (an enumeration) list all values in an array. Leave array empty in case that key is not enumerated.</description>
											</member>
											<member>
												<name>properties</name>
												<value>
													<array>
														<data>
															<value>
																<struct>
																	<member>
																		<name>key</name>
																		<value>
																			<string>lowerbound</string>
																		</value>
																	</member>
																	<member>
																		<name>value</name>
																		<value>
																			<string>thevalue</string>
																		</value>
																	</member>
																</struct>
															</value>
														</data>
													</array>
												</value>
												<description>Array with additional properties of the key. Each property is a key/value pair. Leave array empty if key has no additional properties. Defined properties are "lowerbound" and "upperbound" in order to define a range.</description>
											</member>
											<member>
												<name>description</name>
												<value>
													<string>a description of this key</string>
												</value>
												<description>description of this key</description>
											</member>
										</struct>
									</value>
								</data>
							</array>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
		<!--setLogVariables-->
		<method>
			<description>Specify a list of variables that needs to be stored. After a simulation the variables are stored to the given file.</description>
			<methodCall>
				<methodName>destecs.setLogVariables</methodName>
				<params>
					<param>
						<value>
							<struct>
								<member>
									<name>filePath</name>
									<value>
										<string>Location\filename.csv</string>
									</value>
								</member>
								<member>
									<name>variables</name>
									<value>
										<array>
											<data>
												<value>
													<string>varName</string>
												</value>
											</data>
										</array>
									</value>
									<description>list of variables</description>
								</member>
								<member>
									<name>overwrite</name>
									<value>
										<boolean>true</boolean>
									</value>
								</member>
							</struct>
						</value>
					</param>
				</params>
			</methodCall>
			<methodResponse>
				<params>
					<param>
						<value>
							<boolean>true</boolean>
						</value>
					</param>
				</params>
			</methodResponse>
		</method>
	</methods>
	<methodFaultResponses>
		<methodResponse>
			<fault>
				<value>
					<struct>
						<member>
							<name>faultCode</name>
							<value>
								<int>1</int>
							</value>
						</member>
						<member>
							<name>faultString</name>
							<value>
								<string>Load did not succeed.</string>
							</value>
						</member>
					</struct>
				</value>
			</fault>
		</methodResponse>
		<methodResponse>
			<fault>
				<value>
					<struct>
						<member>
							<name>faultCode</name>
							<value>
								<int>2</int>
							</value>
						</member>
						<member>
							<name>faultString</name>
							<value>
								<string>Unload did not succeed</string>
							</value>
						</member>
					</struct>
				</value>
			</fault>
		</methodResponse>
		<methodResponse>
			<fault>
				<value>
					<struct>
						<member>
							<name>faultCode</name>
							<value>
								<int>3</int>
							</value>
						</member>
						<member>
							<name>faultString</name>
							<value>
								<string>SetActive did not succeed.</string>
							</value>
						</member>
					</struct>
				</value>
			</fault>
		</methodResponse>
		<methodResponse>
			<fault>
				<value>
					<struct>
						<member>
							<name>faultCode</name>
							<value>
								<int>4</int>
							</value>
						</member>
						<member>
							<name>faultString</name>
							<value>
								<string>Initialize did not succeed.</string>
							</value>
						</member>
					</struct>
				</value>
			</fault>
		</methodResponse>
		<methodResponse>
			<fault>
				<value>
					<struct>
						<member>
							<name>faultCode</name>
							<value>
								<int>5</int>
							</value>
						</member>
						<member>
							<name>faultString</name>
							<value>
								<string>Terminate did not succeed.</string>
							</value>
						</member>
					</struct>
				</value>
			</fault>
		</methodResponse>
		<methodResponse>
			<fault>
				<value>
					<struct>
						<member>
							<name>faultCode</name>
							<value>
								<int>6</int>
							</value>
						</member>
						<member>
							<name>faultString</name>
							<value>
								<string>SetParameters did not succeed.</string>
							</value>
						</member>
					</struct>
				</value>
			</fault>
		</methodResponse>
		<methodResponse>
			<fault>
				<value>
					<struct>
						<member>
							<name>faultCode</name>
							<value>
								<int>7</int>
							</value>
						</member>
						<member>
							<name>faultString</name>
							<value>
								<string>Break did not succeed.</string>
							</value>
						</member>
					</struct>
				</value>
			</fault>
		</methodResponse>
		<methodResponse>
			<fault>
				<value>
					<struct>
						<member>
							<name>faultCode</name>
							<value>
								<int>8</int>
							</value>
						</member>
						<member>
							<name>faultString</name>
							<value>
								<string>ShowData did not succeed.</string>
							</value>
						</member>
					</struct>
				</value>
			</fault>
		</methodResponse>
	</methodFaultResponses>
</XML-RPC_Library>
